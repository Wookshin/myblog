I"l`<p><br /></p>

<h1 id="전역-변수의-문제점">전역 변수의 문제점</h1>

<p><br /></p>

<p>전역 변수의 무분별한 사용은 위험합니다.<br />
전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 합니다.<br />
이번 장에서 전역 변수의 문제점과 전역 변수의 사용을 억제할 수 있는 방법을 살펴봅시다.</p>

<p><br /></p>

<h2 id="1-변수의-생명-주기">1. 변수의 생명 주기</h2>

<h3 id="11-지역-변수의-생명-주기">1.1 지역 변수의 생명 주기</h3>

<p>변수는 선언에 의해 생성되고 할당을 통해 값을 갖습니다.<br />
그리고 언젠가 소멸합니다.<br />
즉, 변수는 생물과 유사하게 생성되고 소멸되는 생명 주기(life cycle)가 있습니다.<br />
변수에 생명 주기가 없다면 한번 선언된 변수는 프로그램을 종료하지 않는 한 영원히 메모리 공간을 점유하게 됩니다.</p>

<p>변수는 자신이 선언된 위치에서 생성되고 소멸합니다.<br />
전역 변수의 생명 주기는 애플리케이션의 생명 주기와 같습니다.<br />
하지만 함수 내부에서 선언된 지역 변수는 함수가 호출되면 생성되고 함수가 종료하면 소멸됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// local</span>
  <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// ReferenceError: x is not defined</span>
</code></pre></div></div>

<p><br /></p>

<p>지역 변수 x는 foo 함수가 호출되기 이전까지는 생성되지 않습니다.<br />
foo 함수를 호출하지 않으면 함수 내부의 변수 선언문이 실행되지 않기 때문입니다.</p>

<p>변수 선언은 어디에 있든 상관없이 가장 먼저 실행됩니다.<br />
다시 말해, 변수 선언은 코드가 한 줄씩 순차적으로 실행되는 시점인 런타임에 실행되는 것이 아니라 런타임 이전 단계에서 자바스크립트 엔진에 의해 먼저 실행됩니다.</p>

<p>그런데 엄밀히 말하자면 위 설명은 전역 변수에 한정된 것입니다.<br />
함수 내부에서 선언한 변수는 함수가 호출된 직후에 함수 몸체의 코드가 한 줄씩 순차적으로 실행되기 이전에 자바스크립트 엔진에 의해 먼저 실행됩니다.</p>

<p>위 예제의 foo 함수를 호출하면 함수 몸체의 다른 문들이 순차적으로 실행되기 이전에 x 변수의 선언문이 자바스크립트 엔진에 의해 가장 먼저 실행되어 x 변수가 선언되고 undefined로 초기화됩니다.<br />
그 후, 함수 몸체를 구성하는 문들이 순차적으로 실행되기 시작하고 변수 할당문이 실행되면 x 변수에 값이 할당됩니다.<br />
그리고 함수가 종료하면 x 변수도 소멸되어 생명 주기가 종료됩니다.<br />
따라서 함수 내부에서 선언된 지역 변수 x는 foo 함수가 호출되어 실행되는 동안에만 유효합니다.</p>

<p>즉, <strong>지역 변수의 생명 주기는 함수의 생명 주기와 일치합니다.</strong></p>

<p>함수 몸체 내부에서 선언된 지역 변수의 생명 주기는 함수의 생명 주기와 대부분 일치하지만 지역 변수가 함수보다 오래 생존하는 경우도 있습니다.</p>

<p><strong>변수는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름</strong>입니다.<br />
따라서 변수의 생명 주기는 메모리 공간이 확보(allocate)된 시점부터 메모리 공간이 해제(release)되어 가용 메모리 풀(memory pool)에 반환되는 시점까지입니다.</p>

<p>함수 내부에서 선언된 지역 변수는 함수가 생성한 스코프에 등록됩니다.<br />
함수가 생성한 스코프는 렉시컬 환경이라 부르는 물리적인 실체가 있다고 했습니다.<br />
따라서 변수는 자신이 등록된 스코프가 소멸(메모리 해제)될 때까지 유효합니다.<br />
할당된 메모리 공간은 더 이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 해제되어 가용 메모리 풀에 반환됩니다.</p>

<p>즉, 누군가가 메모리 공간을 참조하고 있으면 해제되지 않고 확보된 상태로 남아있게 됩니다.<br />
이는 스코프도 마찬가지입니다.<br />
누군가 스코프를 참조하고 있으면 스코프는 소멸하지 않고 생존하게 됩니다.</p>

<p>일반적으로 함수가 종료하면 함수가 생성한 스코프도 소멸합니다.<br />
하지만 누군가가 스코프를 참조하고 있다면 스코프는 해제되지 않고 생존하게 됩니다.</p>

<p>앞의 예제를 조금 변형한 퀴즈를 풀어봅시다.<br />
다음 예제의 ①에서 출력되는 값은 무엇인가요?</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">global</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// ①</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">local</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">foo</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// global</span>
</code></pre></div></div>

<p><br /></p>

<p>foo 함수 내부에서 선언된 지역 변수 x는 ①의 시점에 이미 선언되었고 undefined로 초기화되어 있습니다.<br />
따라서 전역 변수 x를 참조하는 것이 아니라 지역 변수 x를 참조해 값을 출력합니다.<br />
즉, 지역 변수는 함수 전체에서 유효합니다.<br />
단, 변수 할당문이 실행되기 이전까지는 undefined 값을 갖습니다.</p>

<p>이처럼 <strong>호이스팅은 스코프를 단위로 동작합니다.</strong><br />
전역 변수의 호이스팅은 전역 변수의 선언이 전역 스코프의 선두로 끌어 올려진 것처럼 동작합니다.<br />
따라서 전역 변수는 전역 전체에서 유효합니다.<br />
지역 변수의 호이스팅은 지역 변수의 선언이 지역 스코프의 선두로 끌어 올려진 것처럼 동작합니다.<br />
따라서 지역 변수는 함수 전체에서 유효합니다.</p>

<p>즉, <strong>호이스팅은 변수 선언이 스코프의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 말합니다.</strong></p>

<p><br /></p>

<h3 id="12-전역-변수의-생명-주기">1.2 전역 변수의 생명 주기</h3>

<p>함수와 달리 전역 코드는 명시적인 호출 없이 실행됩니다.<br />
다시 말해, 전역 코드는 함수 호출과 같이 전역 코드를 실행하는 특별한 진입점이 없고 코드가 로드되자마자 곧바로 해석되고 실행됩니다.<br />
함수는 함수 몸체의 마지막 문 또는 반환문이 실행되면 종료합니다.<br />
하지만 전역 코드에는 반환문을 사용할 수 없으므로 마지막 문이 실행되어 더 이상 실행할 문이 없을 때 종료합니다.</p>

<p>var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 됩니다.<br />
이는 전역 변수의 생명 주기가 전역 객체의 생명 주기와 일치한다는 것을 말합니다.</p>

<p><br /></p>

<blockquote>
  <p><strong>전역 객체(global object)</strong><br />
전역 객체는 코드가 실행되기 이전 단계에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체입니다.<br />
전역 객체는 클라이언트 사이드 환경(브라우저)에서는 window, 서버 사이드 환경(Node.js)에서는 global 객체를 의미합니다.<br />
환경에 따라 전역 객체를 가리키는 다양한 식별자(window, self, this, frames, global)가 존재했으나 ES11(ECMAScript 11)에서 globalThis로 통일되었습니다.<br />
전역 객체는 표준 빌트인 객체(Object, String, Number, Function, Array …)와 환경에 따른 호스트 객체(클라이언트 Web API 또는 Node.js의 호스트 API), 그리고 var 키워드로 선언한 전역 변수와 전역 함수를 프로퍼티로 갖습니다.</p>
</blockquote>

<p><br /></p>

<p>브라우저 환경에서 전역 객체는 window이므로 브라우저 환경에서 var 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티입니다.<br />
전역 개체 window는 웹페이지를 닫기 전까지 유효합니다.<br />
따라서 브라우저 환경에서 var 키워드로 선언한 전역 변수는 웹페이지를 닫을 때까지 유효합니다.</p>

<p>즉, <strong>var 키워드로 선언한 전역 변수의 생명 주기는 전역 객체의 생명 주기와 일치합니다.</strong></p>

<p><br />
<br /></p>

<h2 id="2-전역-변수의-문제점">2. 전역 변수의 문제점</h2>

<h3 id="21-암묵적-결합">2.1 암묵적 결합</h3>

<p>전역 변수를 선언한 의도는 전역,즉 코드 어디서든 참조하고 할당할 수 있는 변수를 사용하겠다는 것입니다.<br />
이는 모든 코드가 전역 변수를 참조하고 변경할 수 있는 <strong>암묵적 결합(implicit coupling)</strong>을 허용하는 것입니다.<br />
변수의 유효 범위가 크면 클수록 코드의 가독성은 나빠지고 의도치 않게 상태가 변경될 수 있는 위험성도 높아집니다.</p>

<p><br /></p>

<h3 id="22-긴-생명-주기">2.2 긴 생명 주기</h3>

<p><strong>전역 변수는 생명 주기가 깁니다.</strong><br />
따라서 메모리 리소스도 오랜 기간 소비합니다.<br />
또한 전역 변수의 상태를 변경할 수 있는 시간도 길고 기회도 많습니다.</p>

<p>더욱이 var 키워드는 변ㅂ수의 중복 선언을 허용하므로 생명 주기가 긴 전역 변수는 변수 이름이 중복될 가능성이 있습니다.<br />
변수 이름이 중복되면 의도치 않은 재할당이 이뤄집니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// ...</span>

<span class="c1">// 변수의 중복 선언. 기존 변수에 값을 재할당한다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 100</span>
</code></pre></div></div>

<p><br /></p>

<p>지역 변수는 전역 변수보다 생명 주기가 훨씬 짧습니다.<br />
크지 않은 함수의 지역 변수는 생존 시간이 극히 짧습니다.<br />
따라서 지역 변수의 상태를 변경할 수 있는 시간도 짧고 기회도 적습니다.<br />
이는 전역 변수보다 상태 변경에 의한 오류가 발생할 확률이 작다는 것을 의미합니다.<br />
또한 메모리 리소스도 짧은 기간만 소비합니다.</p>

<p><br /></p>

<h3 id="23-스코프-체인-상에서-종점에-존재">2.3 스코프 체인 상에서 종점에 존재</h3>

<p>전역 변수는 스코프 체인 상에서 종점에 존재합니다.<br />
이는 변수를 검색할 때 전역 변수가 가장 마지막에 검색된다는 것을 말합니다.<br />
즉, <strong>전역 변수의 검색 속도가 가장 느립니다.</strong><br />
검색 속도의 차이는 그다지 크지 않지만 속도의 차이는 분명이 있습니다.</p>

<p><br /></p>

<h3 id="24-네임스페이스-오염">2.4 네임스페이스 오염</h3>

<p>자바스크립트의 가장 큰 문제점 중 하나는 파일이 분리되어 있다 해도 하나의 전역 스코프를 공유한다는 것입니다.<br />
따라서 다른 파일 내에서 동일한 이름으로 명명된 전역 변수나 전역 함수가 같은 스코프 내에 존재할 경우 예상치 못한 결과를 가져올 수 있습니다.</p>

<p><br />
<br /></p>

<h2 id="3-전역-변수의-사용을-억제하는-방법">3. 전역 변수의 사용을 억제하는 방법</h2>

<p>전역 변수의 무분별한 사용은 위험합니다.<br />
<strong>전역 변수를 반드시 사용해야 할 이유를 찾지 못한다면 지역 변수를 사용해야 합니다.</strong><br />
<strong>변수의 스코프는 좁을수록 좋습니다.</strong><br />
전역 변수를 절대 사용하지 말라는 의미가 아닙니다.<br />
무분별한 전역 변수의 남발은 억제해야 한다는 것입니다.<br />
전역 변수의 사용을 억제할 수 있는 몇 가지 방법을 살펴봅시다.</p>

<p><br /></p>

<h3 id="31-즉시-실행-함수">3.1 즉시 실행 함수</h3>

<p>함수 정의와 동시에 호출되는 즉시 실행 함수는 단 한 번만 호출됩니다.<br />
<strong>모든 코드를 즉시 실행 함수로 감싸면 모든 변수는 즉시 실행 함수의 지역 변수가 됩니다.</strong><br />
이러한 특성을 이용해 전역 변수의 사용을 제한하는 방법입니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 즉시 실행 함수의 지역 변수</span>
  <span class="c1">// ...</span>
<span class="p">})();</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
</code></pre></div></div>

<p>이 방법을 사용하면 전역 변수를 생성하지 않으므로 라이브러리 등에 자주 사용됩니다.</p>

<p><br />
<br /></p>

<h3 id="32-네임스페이스-객체">3.2 네임스페이스 객체</h3>

<p>전역에 네임스페이스(namespace) 역할을 담당할 객체를 생성하고 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가하는 방법입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// 전역 네임스페이스 객체</span>

<span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Lee</span>
</code></pre></div></div>

<p><br /></p>

<p>네임스페이스 객체에 또 다른 네임스페이스 객체를 프로퍼티로 추가해서 네임스페이스를 계층적으로 구성할 수도 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">MYAPP</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// 전역 네임스페이스 객체</span>

<span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">address</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Seoul</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">MYAPP</span><span class="p">.</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Lee</span>
</code></pre></div></div>

<p><br /></p>

<p>네임스페이스를 분리해서 식별자 충돌을 방지하는 효과는 있으나 네임스페이스 객체 자체가 전역 변수에 할당되므로 그다지 유용해 보이지는 않습니다.</p>

<p><br />
<br /></p>

<h3 id="33-모듈-패턴">3.3 모듈 패턴</h3>

<p>모듈 패턴은 클래스를 모방해서 관련이 있는 변수와 함수를 모아 즉시 실행 함수로 감싸 하나의 모듈을 만듭니다.<br />
모듈 패턴은 자바스크립트의 강력한 기능인 클로저를 기반으로 동작합니다.<br />
모듈 패턴의 특징은 전역 변수의 억제는 물론 캡슐화까지 구현할 수 있다는 것입니다.</p>

<p>모듈 패턴을 이해하려면 클로저를 먼저 이해해야 하므로 지금은 클로저라는 기능을 통해 전역 변수를 억제할 수 있다는 데 주목합시다.</p>

<p>캡슐화(encapsulation)는 객체의 상태(state)를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수 있는 동작(behavior)인 메서드를 하나로 묶는 것을 말합니다.<br />
캡슐화는 객체의 특정 프로퍼티나 메서드를 감출 목적으로 사용하기도 하는데 이를 정보 은닉(information hiding)이라 합니다.</p>

<p>대부분의 객체지향 프로그래밍 언어는 클래스를 구성하는 맴버에 대해 public, private, protected 등의 접근 제한자(access modifier)를 사용해 공개 범위를 한정할 수 있습니다.<br />
public으로 선언된 데이터 또는 메서드는 외부에서 접근이 가능하지만 private으로 선언된 경우는 외부에서 접근할 수 없고 내부에서만 사용됩니다.<br />
이것은 클래스 외부에는 제한된 접근 권한을 제공하며 원하지 않는 외부의 접근으로부터 내부를 보호하는 기능을 합니다.</p>

<p>하지만 자바스크립트는 public, private, protected 등의 접근 제한자를 제공하지 않습니다.<br />
모듈 패턴은 전역 네임스페이스의 오염을 막는 기능은 물론 한정적이기는 하지만 정보 은닉을 구현하기 위해 사용합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">Counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="c1">// private 변수</span>
  <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c1">// 외부로 공개할 데이터나 메서드를 프로퍼티로 추가한 객체를 반환한다.</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">increase</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">++</span><span class="nx">num</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">decrease</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">--</span><span class="nx">num</span><span class="p">;</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">})();</span>

<span class="c1">// private 변수는 외부로 노출되지 않는다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">num</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">increase</span><span class="p">());</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">Counter</span><span class="p">.</span><span class="nx">decrease</span><span class="p">());</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제의 즉시 실행 함수는 객체를 반환합니다.<br />
이 객체에는 외부에 노출하고 싶은 변수나 함수를 담아 반환합니다.<br />
이때 반환되는 객체의 프로퍼티는 외부에 노출되는 퍼블릭 맴버(public member)입니다.<br />
외부로 노출하고 싶지 않은 변수나 함수는 반환하는 객체에 추가하지 않으면 외부에서 접근할 수 없는 프라이빗 맴버(private member)가 됩니다.</p>

<p><br />
<br /></p>

<h3 id="34-es6-모듈">3.4 ES6 모듈</h3>

<p>ES6 모듈을 사용하면 더는 전역 변수를 사용할 수 없습니다.<br />
<strong>ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공합니다.</strong><br />
따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며 window 객체의 프로퍼티도 아닙니다.</p>

<p>모던 브라우저(Chrome 61, FF 60, SF 10.1, Edge 16 이상)에서는 ES6 모듈을 사용할 수 있습니다.<br />
script 태그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작합니다.<br />
모듈의 파일 확장자는 mjs를 권장합니다.</p>

<p><br /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"lib.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"app.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>ES6 모듈은 IE를 포함한 구형 브라우저에서는 동작하지 않으며, 브라우저의 ES6 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하기 때문에 아직까지는 브라우저가 지원하는 ES6 모듈 기능보다는 Webpack 등의 모듈 번들러를 사용하는 것이 일반적입니다.</p>

<p><br /></p>

<p><br />
<br />
<br />
<br /></p>
:ET