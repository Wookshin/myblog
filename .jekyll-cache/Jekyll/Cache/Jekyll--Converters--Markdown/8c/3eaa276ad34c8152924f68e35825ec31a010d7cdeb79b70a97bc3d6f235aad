I"Ў<p><br /></p>

<h1 id="rest-api">REST API</h1>

<p>REST(REpresentational State Transfer)는 HTTP/1.0과 1.1의 스펙 작성에 참여했고 아파치 HTTP 서버 프로젝트의 공동 설립자인 로이 필딩(Roy fielding)의 2000년 논문에서 처음 소개되었습니다.<br />
발표 당시의 웹이 HTTP를 제대로 사용하지 못하고 있는 상황을 보고 HTTP의 장점을 최대한 활용할 수 있는 아키텍처로서 REST를 소개했고 이는 HTTP 프로토콜을 의도에 맞게 디자인하도록 유도하고 있습니다.<br />
REST의 기본 원칙을 성실히 지킨 서비스 디자인을 “RESTful”이라고 표현합니다.</p>

<p>즉, REST는 HTTP를 기반으로 클라이언트가 서버의 리소스에 접근하는 방식을 규정한 아키텍처고, REST API는 REST를 기반으로 서비스 API를 구현한 것을 의미합니다.</p>

<p><br /></p>

<h2 id="1-rest-api의-구성">1. REST API의 구성</h2>

<p>REST API는 자원(resource), 행위(verb), 표현(representations)의 3가지 요소로 구성됩니다.<br />
REST는 자체 표현 구조(self-descriptiveness)로 구성되어 REST API만으로 HTTP 요청의 내용을 이해할 수 있습니다.</p>

<table>
  <thead>
    <tr>
      <th>구성 요소</th>
      <th>내용</th>
      <th>표현 방법</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>자원(resource)</td>
      <td>자원</td>
      <td>URI(엔드포인트)</td>
    </tr>
    <tr>
      <td>행위(verb)</td>
      <td>자원에 대한 행위</td>
      <td>HTTP 요청 메서드</td>
    </tr>
    <tr>
      <td>표현(representations)</td>
      <td>자원에 대한 행위의 구체적 내용</td>
      <td>페이로드</td>
    </tr>
  </tbody>
</table>

<p><br /><br /></p>

<h2 id="2-rest-api-설계-원칙">2. REST API 설계 원칙</h2>

<p>REST에서 가장 중요한 기본적인 원칙은 두 가지입니다.<br />
<strong>URL는 리소스를 표현</strong> 하는 데 집중하고 <strong>행위에 대한 정의는 HTTP 요청 메서드</strong> 를 통해 하는 것이 RESTful API를 설계하는 중심 규칙입니다.</p>

<p><br /></p>

<h4 id="1-uri는-리소스를-표현해야-합니다"><em>1. URI는 리소스를 표현해야 합니다.</em></h4>

<p>URI는 리소스를 표현하는 데 중점을 두어야 합니다.<br />
리소스를 식별할 수 있는 이름은 동사보다는 명사를 사용합니다.<br />
따라서 이름에 get 같은 행위에 대한 표현이 들어가서는 안됩니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="err">#</span> <span class="nx">bad</span>
<span class="nx">GET</span> <span class="o">/</span><span class="nx">getTodos</span><span class="o">/</span><span class="mi">1</span>
<span class="nx">GET</span> <span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="nx">show</span><span class="o">/</span><span class="mi">1</span>

<span class="err">#</span> <span class="nx">good</span>
<span class="nx">GET</span> <span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="mi">1</span>
</code></pre></div></div>

<p><br /></p>

<h4 id="2-리소스에-대한-행위는-http-요청-메서드로-표현합니다"><em>2. 리소스에 대한 행위는 HTTP 요청 메서드로 표현합니다.</em></h4>

<p>HTTP 요청 메서드는 클라이언트가 서버에게 요청의 종류와 목적(리소스에 대한 행위)을 알리는 방법입니다.<br />
주로 5가지 요청 메서드(GET, POST, PUT, PATCH, DELETE 등)를 사용하여 CRUD를 구현합니다.</p>

<table>
  <thead>
    <tr>
      <th>HTTP 요청 메서드</th>
      <th>종류</th>
      <th>목적</th>
      <th>페이로드</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>GET</td>
      <td>index/retrieve</td>
      <td>모든/특정리소스 취득</td>
      <td>X</td>
    </tr>
    <tr>
      <td>POST</td>
      <td>create</td>
      <td>리소스 생성</td>
      <td>O</td>
    </tr>
    <tr>
      <td>PUT</td>
      <td>replace</td>
      <td>리소스의 전체 교체</td>
      <td>O</td>
    </tr>
    <tr>
      <td>PATCH</td>
      <td>modify</td>
      <td>리소스의 일부 수정</td>
      <td>O</td>
    </tr>
    <tr>
      <td>DELETE</td>
      <td>delete</td>
      <td>모든/특정 리소스 삭제</td>
      <td>X</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<p>리소스에 대한 행위는 HTTP 요청 메서드를 통해 표현하며 URI에 표현하지 않습니다.<br />
예를 들어, 리소스를 취득하는 경우에는 GET, 리소스를 삭제하는 경우에는 DELETE를 사용하여 리소스에 대한 행위를 명확히 표현합니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="err">#</span> <span class="nx">bad</span>
<span class="nx">GET</span> <span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="k">delete</span><span class="sr">/</span><span class="err">1
</span>
<span class="err">#</span> <span class="nx">good</span>
<span class="nx">DELETE</span> <span class="o">/</span><span class="nx">todos</span><span class="o">/</span><span class="mi">1</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="3-json-server를-이용한-rest-api-실습">3. JSON Server를 이용한 REST API 실습</h2>

<p>HTTP 요청을 전송하고 응답을 받으려면 서버가 필요합니다.<br />
JSON Server를 사용해 가상 REST API 서버를 구축하여 HTTP 요청을 전송하고 응답을 받는 실습을 진행해봅시다.</p>

<p><br /><br /></p>

<h3 id="31-json-server-설치">3.1 JSON Server 설치</h3>

<p>JSON Server는 json 파일을 사용하여 가상 REST API 서버를 구축할 수 있는 툴입니다.<br />
사용법은 매우 간단합니다.<br />
먼저 npm을 사용하여 JSON Server를 설치합시다.</p>

<blockquote>
  <p><strong>npm</strong><br />
npm(node package manager)은 자바스크립트 패키지 매니저입니다.<br />
Node.js에서 사용할 수 있는 모듈들을 패키지화하여 모아둔 저장소 역할과 패키지 설치 및 관리를 위한 CLI(Command Line Interface)를 제공합니다.<br />
자신이 작성한 패키지를 공개할 수도 있고 필요한 패키지를 검색하여 재사용할 수도 있습니다.<br />
npm에 대한 자세한 내용은 다음 URL을 참고하시면 됩니다.<br />
모듈화와 npm: https://poiemaweb.com/nodejs-npm</p>
</blockquote>

<p><br /></p>

<p>터미널에서 다음과 같이 명령어를 입력하여 JSON Server를 설치합니다.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="gp">$</span><span class="w"> </span><span class="nb">mkdir </span>json-server-exam <span class="o">&amp;&amp;</span> <span class="nb">cd </span>json-server-exam
<span class="gp">$</span><span class="w"> </span>npm init <span class="nt">-y</span>
<span class="gp">$</span><span class="w"> </span>npm <span class="nb">install </span>json-server <span class="nt">--save-dev</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="32-dbjson-파일-생성">3.2 db.json 파일 생성</h3>

<p>프로젝트 루트 폴더(/json-server-exam)에 다음과 같이 db.json 파일을 생성합니다.<br />
db.json 파일은 리소스를 제공하는 데이터베이스 역할을 합니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"todos"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
      </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HTML"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"completed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
      </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"CSS"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"completed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
      </span><span class="nl">"content"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Javascript"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"completed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /><br /></p>

<h3 id="33-json-server-실행">3.3 JSON Server 실행</h3>

<p>터미널에서 다음과 같이 명령어를 입력하여 JSON Server를 실행합니다.<br />
JSON Server가 데이터베이스 역할을 하는 db.json 파일의 변경을 감지하게 하려면 watch 옵션을 추가합니다.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="gp">#</span><span class="c"># 기본 포트(3000) 사용 / watch 옵션 적용</span>
<span class="gp">$</span><span class="w"> </span>json-server <span class="nt">--watch</span> db.json
</code></pre></div></div>

<p><br /></p>

<p>기본 포트는 3000입니다.<br />
포트를 변경하려면 port 옵션을 추가합니다.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="gp">#</span><span class="c"># 기본 포트(3000) 사용 / watch 옵션 적용</span>
<span class="gp">$</span><span class="w"> </span>json-server <span class="nt">--watch</span> db.json
</code></pre></div></div>

<p><br /></p>

<p>위와 같이 매번 명령어를 입력하는 것이 번거로우니 package.json 파일의 scripts를 다음과 같이 수정하여 JSON Server를 실행하여 봅시다.<br />
package.json 파일에서 불필요한 항목은 삭제했습니다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"json-server-exam"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"json-server --watch db.json"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"json-server"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.16.1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /></p>

<p>터미널에서 npm start 명령어를 입력하여 JSON Server를 실행합니다.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="gp">PS D:\Code\rest-api&gt;</span><span class="w"> </span>npm start
<span class="go">
</span><span class="gp">&gt;</span><span class="w"> </span>rest-api@1.0.0 start D:<span class="se">\C</span>ode<span class="se">\r</span>est-api
<span class="gp">&gt;</span><span class="w"> </span>json-server <span class="nt">--watch</span> db.json
<span class="go">

  \{^_^}/ hi!

  Loading db.json
  Done

  Resources
  http://localhost:3000/todos

  Home
  http://localhost:3000

  Type s + enter at any time to create a snapshot of the database
  Watching...
</span></code></pre></div></div>

<p><br /><br /></p>

<h3 id="34-get-요청">3.4 GET 요청</h3>

<p>todos 리소스에서 모든 todo를 취득(index)합니다.</p>

<p>JSON Server의 루트 폴더(/json-server-exam)에 public 폴더를 생성하고 JSON Server를 중당한 후 재실행합니다.<br />
그리고 public 폴더에 다음 get_index.html을 추가하고 브라우저에서 http://localhost:3000/get_index.html로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스에서 모든 todo를 취득(index)</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>todos 리소스에서 id 를 사용하여 특정 todo 를 취득(retrieve)합니다.<br />
public 폴더에 다음 get_retrieve.html을 추가하고 브라우저에서 http://localhost:3000/get_retrieve.html 로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스에서 id를 사용하여 특정 todo를 취득(retrieve)</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos/1</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="35-post-요청">3.5 POST 요청</h3>

<p>todos 리소스에 새로운 todo 를 생성합니다.<br />
POST 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 합니다.</p>

<p>public 폴더에 다음 post.html을 추가하고 브라우저에서 http://localhost:3000/post.html 로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스에 새로운 todo를 생성</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">content-type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="c1">// 새로운 todo를 생성하기 위해 페이로드를 서버에 전송해야 한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Angular</span><span class="dl">"</span><span class="p">,</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200(OK) 또는 201(Created)이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">201</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="36-put-요청">3.6 PUT 요청</h3>

<p>PUT은 특정 리소스 전체를 교체할 때 사용합니다.<br />
다음 예제에서는 todos 리소스에서 id 로 todo 를 특정하여 id 를 제외한 리소스 전체를 교체합니다.<br />
PUT 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 합니다.</p>

<p>public 폴더에 다음 put.html을 추가하고 브라우저에서 http://localhost:3000/put.html 로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스에서 id로 todo를 특정하여 id를 제외한 리소스 전체를 교체</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">PUT</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos/4</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">content-type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="c1">// 리소스 전체를 교체하기 위해 페이로드를 서버에 전송해야 한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="na">content</span><span class="p">:</span> <span class="dl">"</span><span class="s2">React</span><span class="dl">"</span><span class="p">,</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="37-patch-요청">3.7 PATCH 요청</h3>

<p>PATCH는 특정 리소스의 일부를 수정할 때 사용합니다.<br />
다음 예제에서는 todos 리소스의 id 로 todo 를 특정하여 completed 만 수정합니다.<br />
PATCH 요청 시에는 setRequestHeader 메서드를 사용하여 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정해야 합니다.</p>

<p>public 폴더에 다음 patch.html을 추가하고 브라우저에서 http://localhost:3000/patch.html 로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스의 id로 todo를 특정하여 completed만 수정</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">PATCH</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos/4</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// 요청 몸체에 담아 서버로 전송할 페이로드의 MIME 타입을 지정</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">content-type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="c1">// 리소스를 수정하기 위해 페이로드를 서버에 전송해야 한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span> <span class="na">completed</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}));</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /><br /></p>

<h3 id="38-delete-요청">3.8 DELETE 요청</h3>

<p>todos 리소스에서 id 를 사용하여 todo 를 삭제합니다.</p>

<p>public 폴더에 다음 delete.html을 추가하고 브라우저에서 http://localhost:3000/delete.html 로 접속합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;pre&gt;&lt;/pre&gt;</span>
    <span class="nt">&lt;script&gt;</span>
      <span class="c1">// XMLHttpRequest 객체 생성</span>
      <span class="kd">const</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="c1">// HTTP 요청 초기화</span>
      <span class="c1">// todos 리소스에서 id를 사용하여 todo를 삭제한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">DELETE</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">/todos/4</span><span class="dl">"</span><span class="p">);</span>

      <span class="c1">// HTTP 요청 전송</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>

      <span class="c1">// load 이벤트는 요청이 성공적으로 완료된 경우 발생한다.</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="c1">// status 프로퍼티 값이 200이면 정상적으로 응답된 상태다.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="dl">"</span><span class="s2">pre</span><span class="dl">"</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">response</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Error</span><span class="dl">"</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">.</span><span class="nx">statusText</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>
    <span class="nt">&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /><br /><br /><br /><br /></p>
:ET