I"c<p><br /></p>

<h1 id="모듈">모듈</h1>

<p><br /></p>

<h2 id="1-모듈의-일반적-의미">1. 모듈의 일반적 의미</h2>

<p>모듈(module)이란 애플리케이션을 구성하는 개별적 요소로서 재사용 가능한 코드 조각을 말합니다.<br />
일반적으로 모듈은 기능을 기준으로 파일 단위로 분리합니다.<br />
이때 모듈이 성립하려면 모듈은 자신만의 <strong>파일 스코프(모듈 스코프)</strong> 를 가질 수 있어야 합니다.</p>

<p>자신만의 파일 스코프를 갖는 모듈의 자산(모듈에 포함되어 있는 변수, 함수, 객체 등)은 기본적으로 비공개 상태입니다.<br />
다시 말해, 자신만의 파일 스코프를 갖는 모듈의 모든 자산은 캡슐화되어 다른 모듈에서 접근할 수 없습니다.<br />
즉, 모듈은 개별적 존재로서 애플리케이션과 분리되어 존재합니다.</p>

<p>하지만 애플리케이션과 완전히 분리되어 개별적으로 존재하는 모듈은 재사용이 불가능하므로 존재의 의미가 없습니다.<br />
모듈은 애플리케이션이나 다른 모듈에 의해 재사용되어야 의미가 있습니다.<br />
따라서 <strong>모듈은 공개가 필요한 자산에 한정하여 명시적으로 선택적 공개가 가능합니다.</strong>
<strong>이를 export 라 합니다.</strong></p>

<p>공개(export)된 모듈의 자산은 다른 모듈에서 재사용할 수 있습니다.<br />
이때 공개된 모듈의 자산을 사용하는 모듈을 모듈 사용자(module consumer)라 합니다.<br />
<strong>모듈 사용자는 모듈이 공개(export)한 자산 중 일부 또는 전체는 선택해 자신의 스코프 내로 불러들여 재사용할 수 있습니다.</strong><br />
<strong>이를 import 라 합니다.</strong></p>

<p>이처럼 모듈은 애플리케이션과 분리되어 개별적으로 존재하다가 필요에 따라 다른 모듈에 의해 재사용됩니다.<br />
모듈은 기능별로 분리되어 개별적인 파일로 작성됩니다.<br />
따라서 코드의 단위를 명확히 분리하여 애플리케이션을 구성할 수 있고, 재사용성이 좋아서 개발 효율성과 유지보수성을 높일 수 있습니다.</p>

<p><br /><br /></p>

<h2 id="2-자바스크립트와-모듈">2. 자바스크립트와 모듈</h2>

<p>자바스크립트는 웹페이지의 단순한 보조 기능을 처리하기 위한 제한적인 용도를 목적으로 태어났습니다.<br />
이러한 태생적 한계로 인해 다른 프로그래밍 언어와 비교할 때 부족한 부분이 있는 것이 사실입니다.<br />
대표적인 것이 모듈 시스템을 지원하지 않는다는 것입니다.<br />
다시 말해, 자바스크립트는 모듈이 성립하기 위해 필요한 파일 스코프와 import, export 를 지원하지 않았습니다.</p>

<p>C 언어는 #include, 자바는 import 등 대부분의 프로그래밍 언어는 모듈 기능을 가지고 있습니다.<br />
하지만 클라이언트 사이드 자바스크립트는 script 태그를 사용하여 외부의 자바스크립트 파일을 로드할 수는 있지만 파일마다 독립적인 파일 스코프를 갖지 않습니다.</p>

<p>다시 말해, 자바스크립트 파일을 여러 개의 파일로 분리하여 script 태그로 로드해도 분리된 자바스크립트 파일들은 결국 하나의 자바스크립트 파일 내에 있는 것처럼 동작합니다.<br />
즉, 모든 자바스크립트 파일은 하나의 전역을 공유합니다.<br />
따라서 분리된 자바스크립트 파일들의 전역 변수가 중복되는 등의 문제가 발생할 수 있습니다.<br />
이것으로는 모듈을 구현할 수 없습니다.</p>

<p>자바스크립트를 클라이언트 사이드, 즉 브라우저 환경에 국한하지 않고 범용적으로 사용하려는 움직임이 생기면서 모듈 시스템은 반드시 해결해야 하는 핵심 과제가 되었습니다.<br />
이런 상황에서 제안된 것이 CommonJS와 AMD(Asynchronous Module Definition)입니다.</p>

<p>이로써 자바스크립트의 모듈 시스템은 크게 CommonJS와 AMD 진영으로 나뉘게 되었고 브라우저 환경에서 모듈을 사용하기 위해서는 CommonJS와 AMD를 구현한 모듈 로더 라이브러리를 사용해야 하는 상황이 되었습니다.</p>

<p>자바스크립트 런타임 환경인 Node.js는 모듈 시스템의 사실상 표준(de facto standard)인 CommonJS를 채택했고 독자적인 진화를 거쳐, 현재는 CommonJS 사양과 100% 동일하지는 않지만 기본적으로 CommonJS 사양을 따르고 있습니다.<br />
즉, Node.js는 ECMAScript 표준 사양은 아니지만 모듈 시스템을 지원합니다.<br />
따라서 Node.js 환경에서는 파일별로 독립적인 파일 스코프(모듈 스코프)를 갖습니다.</p>

<p><br /><br /></p>

<h2 id="3-es6-모듈esm">3. ES6 모듈(ESM)</h2>

<p>이러한 상황에서 ES6에서는 클라이언트 사이드 자바스크립트에서도 동작하는 모듈 기능을 추가했습니다.<br />
IE를 제외한 대부분의 브라우저(Chrome 61, FF 60, SF 10.1, Edge 16 이상)에서 ES6 모듈을 사용할 수 있습니다.</p>

<p>ES6 모듈(앞으로 ESM이라 부릅니다)의 사용법은 간단합니다.<br />
script 태그에 type=”module” 어트리뷰트를 추가하면 로드된 자바스크립트 파일은 모듈로서 동작합니다.<br />
일반적인 자바스크립트 파일이 아닌 ESM임을 명확히 하기 위해 ESM의 파일 확장자는 mjs를 사용할 것을 권장합니다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"app.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>ESM에는 클래스와 마찬가지로 기본적으로 strict mode가 적용됩니다.</p>

<p><br /></p>

<h3 id="31-모듈-스코프">3.1 모듈 스코프</h3>

<p>ESM은 독자적인 모듈 스코프를 갖습니다.<br />
ESM이 아닌 일반적인 자바스크립트 파일은 script 태그로 분리해서 로드해도 독자적인 모듈 스코프를 갖지 않습니다.<br />
다음 예제를 살펴봅시다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// foo.js</span>
<span class="c1">// x 변수는 전역 변수다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// foo</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// bar.js</span>
<span class="c1">// x 변수는 전역 변수다. foo.js에서 선언한 전역 변수 x와 중복된 선언이다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// foo.js에서 선언한 전역 변수 x의 값이 재할당되었다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// bar</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"foo.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"bar.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제의 HTML에서 script 태그로 분리해서 로드된 2개의 자바스크립트 파일은 하나의 자바스크립트 파일 내에 있는 것처럼 동작합니다.<br />
즉, 하나의 전역을 공유합니다.<br />
따라서 foo.js에서 선언한 x 변수와 bar.js에서 선언한 x 변수는 중복 선언되며 의도치 않게 x 변수의 값이 덮어써집니다.</p>

<p>ESM은 파일 자체의 독자적인 모듈 스코프를 제공합니다.<br />
따라서 모듈 내에서 var 키워드로 선언한 변수는 더는 전역 변수가 아니며 window 객체의 프로퍼티도 아닙니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// foo.mjs</span>
<span class="c1">// x 변수는 전역 변수가 아니며 window 객체의 프로퍼티도 아니다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// foo</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// bar.mjs</span>
<span class="c1">// x 변수는 전역 변수가 아니며 window 객체의 프로퍼티도 아니다.</span>
<span class="c1">// foo.mjs에서 선언한 x 변수와 스코프가 다른 변수다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// bar</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"foo.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"bar.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>모듈 내에서 선언한 식별자는 모듈 외부에서 참조할 수 없습니다.<br />
모듈 스코프가 다르기 때문입니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// foo.mjs</span>
<span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// foo</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// bar.mjs</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// ReferenceError: x is not defined</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"foo.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"bar.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="32-export-키워드">3.2 export 키워드</h3>

<p>모듈은 독자적인 모듈 스코프를 갖습니다.<br />
따라서 모듈 내부에서 선언한 모든 식별자는 기본적으로 해당 모듈 내부에서만 참조할 수 있습니다.<br />
모듈 내부에서 선언한 식별자를 외부에 공개하여 다른 모듈들이 재사용할 수 있게 하려면 export 키워드를 사용합니다.</p>

<p>export 키워드는 선언문 앞에 사용합니다.<br />
이로써 변수, 함수, 클래스 등 모든 식별자를 export 할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// lib.mjs</span>
<span class="c1">// 변수의 공개</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">pi</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>

<span class="c1">// 함수의 공개</span>
<span class="k">export</span> <span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 클래스의 공개</span>
<span class="k">export</span> <span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /></p>

<p>선언문 앞에 매번 export 키워드를 붙이는 것이 번거롭다면 export 할 대상을 하나의 객체로 구성하여 한 번에 export 할 수도 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// lib.mjs</span>
<span class="kd">const</span> <span class="nx">pi</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 변수, 함수 클래스를 하나의 객체로 구성하여 공개</span>
<span class="k">export</span> <span class="p">{</span> <span class="nx">pi</span><span class="p">,</span> <span class="nx">square</span><span class="p">,</span> <span class="nx">Person</span> <span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="33-import-키워드">3.3 import 키워드</h3>

<p>다른 모듈에서 공개(export)한 식별자를 자신의 모듈 스코프 내부로 로드하려면 import 키워드를 사용합니다.<br />
다른 모듈이 export 한 식별자 이름으로 import 해야 하며 ESM의 경우 파일 확장자를 생략할 수 없습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// app.mjs</span>
<span class="c1">// 같은 폴더 내의 lib.mjs 모듈이 export한 식별자 이름으로 import한다.</span>
<span class="c1">// ESM의 경우 파일 확장자를 생략할 수 없다.</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">pi</span><span class="p">,</span> <span class="nx">square</span><span class="p">,</span> <span class="nx">Person</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./lib.mjs</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pi</span><span class="p">);</span> <span class="c1">// 3.141592653589793</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span> <span class="c1">// 100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Person { name: 'Lee' }</span>
</code></pre></div></div>

<p><br /></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"module"</span> <span class="na">src=</span><span class="s">"app.mjs"</span><span class="nt">&gt;&lt;/script&gt;</span>
  <span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제의 app.mjs는 애플리케이션의 진입점(entry point)이므로 반드시 script 태그로 로드해야 합니다.<br />
하지만 lib.mjs는 app.mjs의 import 문에 의해 로드되는 의존성(dependency)입니다.<br />
따라서 lib.mjs는 script 태그로 로드하지 않아도 됩니다.</p>

<p>모듈이 export한 식별자 이름을 일일이 지정하지 않고 하나의 이름으로 한 번에 import할 수도 있습니다.<br />
이때 import되는 식별자는 as 뒤에 지정한 이름의 객체에 프로퍼티로 할당합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// app.mjs</span>
<span class="c1">// lib.mjs 모듈이 export한 모든 식별자를 lib 객체의 프로퍼티로 모아 import한다.</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">lib</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./lib.mjs</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lib</span><span class="p">.</span><span class="nx">pi</span><span class="p">);</span> <span class="c1">// 3.141592653589793</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lib</span><span class="p">.</span><span class="nx">square</span><span class="p">(</span><span class="mi">10</span><span class="p">));</span> <span class="c1">// 100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">lib</span><span class="p">.</span><span class="nx">Person</span><span class="p">(</span><span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Person { name: 'Lee' }</span>
</code></pre></div></div>

<p><br /></p>

<p>모듈이 export한 식별자 이름을 변경하여 import할 수도 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// app.mjs</span>
<span class="c1">// lib.mjs 모듈이 export한 식별자 이름을 변경하여 import한다.</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">pi</span> <span class="k">as</span> <span class="nx">PI</span><span class="p">,</span> <span class="nx">square</span> <span class="k">as</span> <span class="nx">sq</span><span class="p">,</span> <span class="nx">Person</span> <span class="k">as</span> <span class="nx">P</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./lib.mjs</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">PI</span><span class="p">);</span> <span class="c1">// 3.141592653589793</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sq</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 4</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">P</span><span class="p">(</span><span class="dl">"</span><span class="s2">Kim</span><span class="dl">"</span><span class="p">));</span> <span class="c1">// Person { name: 'Kim' }</span>
</code></pre></div></div>

<p><br /></p>

<p>모듈에서 하나의 값만 export한다면 default 키워드를 사용할 수 있습니다.<br />
default 키워드를 사용하는 경우 기본적으로 이름 없이 하나의 값을 export합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// lib.mjs</span>
<span class="k">export</span> <span class="k">default</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<p>default 키워드를 사용하는 경우, var, let, const 키워드는 사용할 수 없습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// lib.mjs</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="c1">// =&gt; SyntaxError: Unexpected token 'const'</span>
<span class="c1">// export default () =&gt; {};</span>
</code></pre></div></div>

<p><br /></p>

<p>default 키워드와 함께 export한 모듈은 {} 없이 임의의 이름으로 import 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// app.mjs</span>
<span class="k">import</span> <span class="nx">square</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./lib.mjs</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">square</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span> <span class="c1">// 9</span>
</code></pre></div></div>

<p><br /><br /><br /><br /><br /></p>
:ET