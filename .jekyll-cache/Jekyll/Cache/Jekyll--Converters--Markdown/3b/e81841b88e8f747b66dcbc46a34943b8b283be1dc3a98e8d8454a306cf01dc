I"{Q<p><br /></p>

<h1 id="비동기-프로그래밍">비동기 프로그래밍</h1>

<p><br /></p>

<h2 id="1-동기-처리와-비동기-처리">1. 동기 처리와 비동기 처리</h2>

<p>함수를 호출하면 함수 코드가 평가되어 함수 실행 컨텍스트가 생성됩니다.<br />
이때 생성된 함수 실행 컨텍스트는 실행 컨텍스트 스택(콜 스택이라고도 부릅니다)에 푸시되고 함수 코드가 실행됩니다.<br />
함수 코드의 실행이 종료하면 함수 실행 컨텍스트는 실행 컨텍스트 스택에서 팝되어 제거됩니다.</p>

<p>다음 예제의 foo 함수와 bar 함수는 호출된 순서대로 스택 자료구조인 실행 컨텍스트 스택에 푸시되어 실행됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>
<span class="kd">const</span> <span class="nx">bar</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{};</span>

<span class="nx">foo</span><span class="p">();</span>
<span class="nx">bar</span><span class="p">();</span>
</code></pre></div></div>

<p><br /></p>

<p>함수가 실행되려면 “함수 코드 평가 과정”에서 생성된 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되어야 합니다.<br />
다시 말해, 실행 컨텍스트 스택에 함수 실행 컨텍스트가 푸시되는 것은 바로 함수 실행의 시작을 의미합니다.<br />
함수가 호출된 순서대로 순차적으로 실행되는 이유는 함수가 호출된 순서대로 함수 실행 컨텍스트가 실행 컨텍스트 스택에 푸시되기 때문입니다.<br />
이처럼 함수의 실행 순서는 실행 컨텍스트 스택으로 관리합니다.</p>

<p><strong>자바스크립트 엔진은 단 하나의 실행 컨텍스트 스택을 갖습니다.</strong><br />
이는 함수를 실행할 수 있는 창구가 단 하나이며, 동시에 2개 이상의 함수를 동시에 실행할 수 없다는 것을 의미합니다.<br />
실행 컨텍스트 스택의 최상위 요소인 태스크들은 현재 실행 중인 실행 컨텍스트가 팝되어 실행 컨텍스트 스택에서 제거되면, 다시 말해 현재 실행 중인 함수가 종료하면 비로소 실행되기 시작합니다.</p>

<p>이처럼 자바스크립트 엔진은 한 번에 하나의 태스크만 실행할 수 있는 <strong>싱글 스레드(single thread)</strong> 방식으로 동작합니다.<br />
싱글 스레드 방식은 한 번에 하나의 태스크만 실행할 수 있기 때문에 처리에 시간이 걸리는 태스크를 실행하는 경우 <strong>블로킹(blocking, 실행중단)</strong> 이 발생합니다.<br />
예를 들어, setTimeout 함수와 유사하게 일정 시간이 경과한 이후에 콜백 함수를 호출하는 sleep 함수를 구현해 봅시다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// sleep 함수는 일정 시간(delay)이 경과한 이후에 콜백 함수(func)를 호출한다.</span>
<span class="kd">function</span> <span class="nx">sleep</span><span class="p">(</span><span class="nx">func</span><span class="p">,</span> <span class="nx">delay</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Date.now()는 현재 시간을 숫자(ms)로 반환한다.("30.2.1. Date.now" 참고)</span>
  <span class="kd">const</span> <span class="nx">delayUntil</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">+</span> <span class="nx">delay</span><span class="p">;</span>

  <span class="c1">// 현재 시간(Date.now())에 delay를 더한 delayUntil이 현재 시간보다 작으면 계속 반복한다.</span>
  <span class="k">while</span> <span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span> <span class="o">&lt;</span> <span class="nx">delayUntil</span><span class="p">);</span>
  <span class="c1">// 일정 시간(delay)이 경과한 이후에 콜백 함수(func)를 호출한다.</span>
  <span class="nx">func</span><span class="p">();</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// sleep 함수는 3초 이상 실행된다..</span>
<span class="nx">sleep</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
<span class="c1">// bar 함수는 sleep 함수의 실행이 종료된 이후에 호출되므로 3초 이상 블로킹된다.</span>
<span class="nx">bar</span><span class="p">();</span>
<span class="c1">// (3초 경과 후) foo 호출 -&gt; bar 호출</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제의 sleep 함수는 3초 후에 foo 함수를 호출합니다.<br />
이때 bar 함수는 sleep 함수의 실행이 종료된 이후에 호출되므로 3초 이상(foo 함수의 실행 시간 + 3초) 호출되지 못하고 블로킹(작업 중단)됩니다.</p>

<p>이처럼 현재 실행 중인 태스크가 종료할 때까지 다음에 실행될 태스크가 대기하는 방식을 <strong>동기(synchronous) 처리</strong> 라고 합니다.<br />
동기 처리 방식은 태스크를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만, 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹되는 단점이 있습니다.</p>

<p>위 예제를 타이머 함수인 setTimeout 을 사용하여 수정해 봅시다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 타이머 함수 setTimeout은 일정 시간이 경과한 이후에 콜백 함수 foo를 호출한다.</span>
<span class="c1">// 타이머 함수 setTimeout은 bar 함수를 블로킹하지 않는다.</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
<span class="nx">bar</span><span class="p">();</span>
<span class="c1">// bar 호출 -&gt; (3초 경과 후) foo 호출</span>
</code></pre></div></div>

<p><br /></p>

<p>setTimeout 함수는 앞서 살펴본 sleep 함수와 유사하게 일정 시간이 경과한 이후에 콜백 함수를 호출하지만 setTimeout 함수 이후의 태스크를 블로킹하지 않고 곧바로 실행합니다.<br />
이처럼 현재 실행 중인 태스크가 종료되지 않은 상태라 해도 다음 태스크를 곧바로 실행하는 방식을 <strong>비동기(asynchronous) 처리</strong> 라고 합니다.</p>

<p>동기 처리 방식은 태스크를 순서대로 하나씩 처리하므로 실행 순서가 보장된다는 장점이 있지만, 앞선 태스크가 종료할 때까지 이후 태스크들이 블로킹 되는 단점이 있습니다.<br />
비동기 처리 방식은 현재 실행 중인 태스크가 종료되지 않은 상태라 해도 다음 태스크를 곧바로 실행하므로 블로킹이 발생하지 않는다는 장점이 있지만, 태스크의 실행 순서가 보장되지 않는 단점이 있습니다.</p>

<p>비동기 처리를 수행하는 비동기 함수는 전통적으로 콜백 패턴을 사용합니다.<br />
비동기 처리를 위한 콜백 패턴은 콜백 헬(callback hell)을 발생시켜 가독성을 나쁘게 하고, 비동기 처리 중 발생한 에러의 예외 처리가 곤란하며, 여러 개의 비동기 처리를 한 번에 처리하는 데도 한계가 있습니다.</p>

<p><strong>타이머 함수인 setTimeout 와 setInterval, HTTP 요청, 이벤트 핸들러는 비동기 처리 방식으로 동작합니다.</strong><br />
비동기 처리는 이벤트 루프와 태스크 큐와 깊은 관계가 있습니다.</p>

<p><br /><br /></p>

<h2 id="2-이벤트-루프와-태스크-큐">2. 이벤트 루프와 태스크 큐</h2>

<p>자바스크립트의 특징 중 하나는 싱글 스레드로 동작한다는 것입니다.<br />
앞서 살펴본 바와 같이 싱글 스레드 방식은 한 번에 하나의 태스크만 처리할 수 있다는 것을 의미합니다.<br />
하지만 브라우저가 동작하는 것을 살펴보면 많은 태스크가 동시에 처리되는 것처럼 느껴집니다.</p>

<p>예를 들어, HTML 요소가 애니메이션 효과를 통해 움직이면서 이벤트를 처리하기도 하고, HTTP 요청을 통해 서버로부터 데이터를 가지고 오면서 렌더링하기도 합니다.<br />
이처럼 자바스크립트의 동시성(concurrency)을 지원하는 것이 바로 <strong>이벤트 루프(event loop)</strong> 입니다.</p>

<p>이벤트 루프는 브라우저에 내장되어 있는 기능 중 하나입니다.<br />
구글의 V8 자바스크립트 엔진을 비롯한 대부분의 자바스크립트 엔진은 크게 2개의 영역으로 구분할 수 있습니다.</p>

<p><br /></p>

<h4 id="콜-스택call-stack"><em>콜 스택(call stack)</em></h4>

<p>소스코드(전역 코드나 함수 코드 등) 평가 과정에서 생성된 실행 컨텍스트가 추가되고 제거되는 스택 자료구조인 실행 컨텍스트 스택이 바로 콜 스택입니다.<br />
함수를 호출하면 함수 실행 컨텍스트가 순차적으로 콜 스택에 푸시되어 순차적으로 실행됩니다.<br />
자바스크립트 엔진은 단 하나의 콜 스택을 사용하기 때문에 최상위 실행 컨텍스트(실행 중인 실행 컨텍스트)가 종료되어 콜 스택에서 제거되기 전까지는 다른 어떤 태스크도 실행되지 않습니다.</p>

<p><br /></p>

<h4 id="힙heap"><em>힙(heap)</em></h4>

<p>힙은 객체가 저장되는 메모리 공간입니다.<br />
콜 스택의 요소인 실행 컨텍스트는 힙에 저장된 객체를 참조합니다.</p>

<p>메모리에 값을 저장하려면 먼저 값을 저장할 메모리 공간의 크기를 결정해야 합니다.<br />
객체는 원시 값과는 달리 크기가 정해져 있지 않으므로 할당해야 할 메모리 공간의 크기를 런타임에 결정(동적 할당)해야 합니다.<br />
따라서 객체가 저장되는 메모리 공간인 힙은 구조화되어 있지 않다는 특징이 있습니다.</p>

<p><br /></p>

<p>이처럼 콜 스택과 힙으로 구성되어 있는 자바스크립트 엔진은 단순히 태스크가 요청되면 콜 스택을 통해 요청된 작업을 순차적으로 실행할 뿐입니다.<br />
<strong>비동기 처리에서 소스코드의 평가와 실행을 제외한 모든 처리는 자바스크립트 엔진을 구동하는 환경인 브라우저 또는 Node.js가 담당합니다.</strong><br />
예를 들어, 비동기 방식으로 동작하는 setTimeout 의 콜백 함수의 평가와 실행은 자바스크립트 엔진이 담당하지만 호출 스케줄링을 위한 타이머 설정과 콜백 함수의 등록은 브라우저 또는 Node.js가 담당합니다.<br />
이를 위해 브라우저 환경은 태스크 큐와 이벤트 루프를 제공합니다.</p>

<p><br /></p>

<h4 id="태스크-큐task-queueevent-queuecallback-queue"><em>태스크 큐(task queue/event queue/callback queue)</em></h4>

<p>setTimeout 이나 setInterval 과 같은 비동기 함수의 콜백 함수 또는 이벤트 핸들러가 일시적으로 보관되는 영역입니다.<br />
태스크 큐와는 별도로 프로미스의 후속 처리 메서드의 콜백 함수가 일시적으로 보관되는 마이크로태스크 큐도 존재합니다.</p>

<p><br /></p>

<h4 id="이벤트-루프event-loop"><em>이벤트 루프(event loop)</em></h4>

<p>이벤트 루프는 콜 스택에 현재 실행 중인 실행 컨텍스트가 있는지, 그리고 태스크 큐에 대기 중인 함수(콜백 함수, 이벤트 핸들러 등)가 있는지 반복해서 확인합니다.<br />
만약 <strong>콜 스택이 비어 있고 태스크 큐에 대기 중인 함수가 있다면 이벤트 루프는 순차적(FIFO, First In First Out)으로 태스크 큐에 대기 중인 함수를 콜 스택으로 이동시킵니다.</strong><br />
이때 콜 스택으로 이동한 함수는 실행됩니다.<br />
즉, 태스크 큐에 일시 보관된 함수들은 비동기 처리 방식으로 동작합니다.</p>

<p><br /></p>

<p>브라우저 환경에서 다음 예제가 어떻게 동작할지 살펴봅시다.<br />
foo 함수와 bar 함수 중에서 먼저 실행될 함수는 무엇일까요?</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">bar</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">foo</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// 0초(실제는 4ms) 후에 foo 함수가 호출된다.</span>
<span class="nx">bar</span><span class="p">();</span>
</code></pre></div></div>

<p><br /></p>

<ol>
  <li>
    <p>전역 코드가 평가되어 전역 실행 컨텍스트가 생성되고 콜 스택에 푸시됩니다.</p>
  </li>
  <li>
    <p>전역 코드가 실행되기 시작하여 setTimeout 함수가 호출됩니다. 이때 setTimeout 함수의 함수 실행 컨텍스트가 생성되고 콜 스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 됩니다. 브라우저의 Web API(호스트 객체)인 타이머 함수도 함수이므로 함수 실행 컨텍스트를 생성합니다.</p>
  </li>
  <li>
    <p>setTimeout 함수가 실행되면 콜백 함수를 호출 스케줄링하고 종료되어 콜 스택에서 팝됩니다. 이때 호출 스케줄링, 즉 타이머 설정과 타이머가 만료되면 콜백 함수를 태스크 큐에 푸시하는 것은 브라우저의 역할입니다.</p>
  </li>
  <li>
    <p>브라우저가 수행하는 4-1과 자바스크립트 엔진이 수행하는 4-2는 병행 처리됩니다.</p>

    <p>4-1. 브라우저는 타이머를 설정하고 타이머의 만료를 기다립니다. 이후 타이머가 만료되면 콜백 함수 foo 가 태스크 큐에 푸시됩니다. 위 예제의 경우 지연 시간(delay)이 0이지만 지연 시간이 4ms 이하인 경우 최소 지연 시간 4ms가 지정됩니다. 따라서 <strong>4ms 후에 콜백 함수 foo가 태스크 큐에 푸시되어 대기하게 됩니다.</strong> 이 처리 또한 자바스크립트 엔진이 아니라 브라우저가 수행합니다. 이처럼 setTimeout 함수로 호출 스케줄링한 콜백 함수는 정확히 지연 시간 후에 호출된다는 보장은 없습니다. 지연 시간 이후에 콜백 함수가 태스크 큐에 푸시되어 대기하게 되지만 콜 스택이 비어야 호출되므로 약간의 시간차가 발생할 수 있기 때문입니다.</p>

    <p>4-2. bar 함수가 호출되어 bar 함수의 함수 실행 컨텍스트가 생성되고 콜 스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 됩니다. 이후 bar 함수가 종료되어 콜 스택에서 팝됩니다. 이때 브라우저가 타이머를 설정한 후 4ms가 경과했다면 <strong>foo 함수는 아직 태스크 큐에서 대기 중입니다.</strong></p>
  </li>
  <li>
    <p>전역 코드 실행이 종료되고 전역 실행 컨텍스트가 콜 스택에서 팝됩니다. 이로서 콜 스택에는 아무런 실행 컨텍스트도 존재하지 않게 됩니다.</p>
  </li>
  <li>
    <p>이벤트 루프에 의해 콜 스택이 비어 있음이 감지되고 태스크 큐에서 대기 중인 콜백 함수 foo 가 이벤트 루프에 의해 콜 스택에 푸시됩니다. 다시 말해, 콜백 함수 foo 의 함수 실행 컨텍스트가 생성되고 콜 스택에 푸시되어 현재 실행 중인 실행 컨텍스트가 됩니다. 이후 foo 함수가 종료되어 콜 스택에서 팝됩니다.</p>
  </li>
</ol>

<p><br /></p>

<p>이처럼 <strong>비동기 함수인 setTimeout 의 콜백 함수는 태스크 큐에 푸시되어 대기하다가 콜 스택이 비게 되면, 다시 말해 전역 코드 및 명시적으로 호출된 함수가 모두 종료하면 비로소 콜 스택에 푸시되어 실행됩니다.</strong></p>

<p><strong>자바스크립트는 싱글 스레드 방식으로 동작합니다.</strong><br />
<strong>이때 싱글 스레드 방식으로 동작하는 것은 브라우저가 아니라 브라우저에 내장된 자바스크립트 엔진이라는 것에 주의하기 바랍니다.</strong><br />
<strong>만약 모든 자바스크립트 코드가 자바스크립트 엔진에서 싱글 스레드 방식으로 동작한다면 자바스크립트는 비동기로 동작할 수 없습니다.</strong><br />
<strong>즉, 자바스크립트 엔진은 싱글 스레드로 동작하지만 브라우저는 멀티 스레드로 동작합니다.</strong></p>

<p>예를 들어, setTimeout 함수의 모든 처리가 자바스크립트 엔진에서 싱글 스레드로 수행된다고 가정해 봅시다.<br />
이때 setTimeout 함수의 호출 스케줄링을 위한 타이머 설정도 자바스크립트 엔진에서 수행될 것이므로 대기시간 동안 어떤 태스크도 실행할 수 없습니다(앞에서 살펴본 sleep 함수를 떠올려 봅시다).<br />
즉, setTimeout 함수의 타이머 설정까지 자바스크립트 엔진에서 싱글 스레드 방식으로 동작해서는 비동기로 동작할 수 없습니다.</p>

<p>브라우저는 자바스크립트 엔진 외에도 렌더링 엔진과 Web API를 제공합니다.<br />
Web API는 ECMAScript 사양에 정의된 함수가 아니라 브라우저에서 제공하는 API이며, DOM API와 타이머 함수, HTTP 요청(Ajax)과 같은 비동기 처리를 포함합니다.<br />
위 예제에서 살펴봤듯이 브라우저의 Web API인 setTimeout 함수가 호출되면 자바스크립트 엔진의 콜 스택에 푸시되어 실행됩니다.</p>

<p>하지만 setTimeout 함수의 두 가지 기능인 타이머 설정과 타이머가 만료하면 콜백 함수를 태스크 큐에 등록하는 처리는 자바스크립트 엔진이 아니라 브라우저가 실행합니다.<br />
브라우저가 수행하는 4-1과 자바스크립트 엔진이 수행하는 4-2는 병행 처리됩니다.<br />
이처럼 브라우저와 자바스크립트 엔진이 협력하여 비동기 함수인 setTimeout 함수를 실행합니다.</p>

<p><br /><br /><br /><br /><br /></p>
:ET