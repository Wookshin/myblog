I",<p><br /></p>

<h1 id="젠킨스jenkins-정리">젠킨스(Jenkins) 정리</h1>
<p><br /></p>

<p><strong><em>젠킨스(Jenkins)에 대해 정리합니다.</em></strong><br />
<br />
<br />
<br /></p>

<h2 id="ci-continuous-integration">CI (Continuous Integration)</h2>
<ul>
  <li>소프트웨어 개발을 위한 라이프사이클 전체에 걸쳐 지속적인 통합, 자동화, 모니터링 등을 제공하는 SW 개발 방식입니다.</li>
  <li><strong>개발자들이 작업한 내용을 빠른 주기로 master 브랜치에 통합 및 빌드함</strong>으로써, 통합 과정에서 발생하는 이슈의 조기 발견이 가능해 집니다.</li>
</ul>

<p><br /></p>

<h2 id="ci-관련-용어">CI 관련 용어</h2>
<ul>
  <li>버전관리시스템 (Git…)</li>
  <li>브랜치 관리 전략 (GitFlow…)</li>
  <li>CI 도구 (Jenkins…)</li>
  <li>빌드 자동화 (Ant, Maven…)</li>
  <li>코드 커버리지 (Sonarqube…)</li>
  <li>코드 정적 분석 (Sonarqube…)</li>
  <li>테스트 자동화</li>
  <li>바이너리 관리 도구</li>
  <li>패키징 자동화</li>
</ul>

<p><br /></p>

<h2 id="cd-continuous-delivery">CD (Continuous Delivery)</h2>
<ul>
  <li><strong>지속적인 배포</strong>입니다.</li>
  <li>Continuous Delivery or Continuous Deployment</li>
  <li>소프트웨어가 항상 신뢰 가능한 수준에서 배포될 수 있도록 지속적인 관리 및 배포하는 과정입니다.</li>
  <li>소프트웨어를 더 빠르게, 더 주기적으로 빌드하고 테스트하고 출시하는 것을 목표로 합니다.</li>
</ul>

<p><br /></p>

<h2 id="젠킨스-jenkins">젠킨스 (Jenkins)</h2>
<ul>
  <li>대표적인 소프트웨어 CI 도구 (https://jenkins.io/)</li>
  <li>2004년 썬 마이크로시스템즈에서 허드슨 프로젝트를 통해 시작</li>
</ul>

<p><br /></p>

<h2 id="환경-설정-순서">환경 설정 순서</h2>
<ul>
  <li>MobaXterm 다운로드</li>
  <li>MobaXterm 통해서 AWS EC2서버 연동</li>
  <li>JAVA 설치</li>
  <li>Jenkins 설치</li>
</ul>

<p><br /></p>

<h2 id="mobaxterm-다운로드">MobaXterm 다운로드</h2>
<p>https://mobaxterm.mobatek.net/</p>

<p><br /></p>

<h2 id="java-설치">JAVA 설치</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo </span>apt update
 <span class="nb">sudo </span>apt <span class="nb">install </span>openjdk-8-jdk
 java <span class="nt">-version</span>   <span class="c">#자바 버전 확인</span>
 update-java-alternatives <span class="nt">-l</span>   <span class="c">#자바 설치된 위치 확인</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="java_home-환경변수-추가">JAVA_HOME 환경변수 추가</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo </span>vi /etc/environment
</code></pre></div></div>

<p>하기 경로를 추가합니다.<br />
<strong>JAVA_HOME=”/usr/lib/jvm/java-1.8.0-openjdk-amd64”</strong></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">source</span> /etc/environment
 <span class="nb">echo</span> <span class="nv">$JAVA_HOME</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="젠킨스2-설치">젠킨스2 설치</h2>
<p>https://jenkins.io/doc/book/installing/#debianubuntu</p>

<p>1) 시스템에 저장소 키 추가 (ok라고 나와야 함)</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> wget <span class="nt">-q</span> <span class="nt">-O</span> - https://pkg.jenkins.io/debian-stable/jenkins.io.key | <span class="nb">sudo </span>apt-key add -
</code></pre></div></div>

<p>2) 데비안 패키지 저장소 주소 추가</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s1">'echo deb https://pkg.jenkins.io/debian-stable binary/ &gt; \
    /etc/apt/sources.list.d/jenkins.list'</span>
</code></pre></div></div>

<p>3) 패키지 인덱스 업데이트</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo </span>apt-get update
</code></pre></div></div>

<p>4) 젠킨스 설치</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo </span>apt-get <span class="nb">install </span>jenkins
</code></pre></div></div>

<p><br /></p>

<h2 id="젠킨스2-설정">젠킨스2 설정</h2>

<p>1) 브라우저에서 EC2의 퍼블릭 IPv4 주소:8080 입력합니다.</p>
<ul>
  <li>http://xx.xxx.xx.xxx:8080/</li>
  <li>Getting Started 페이지가 뜬다면 젠킨스2 설치 완료된 것입니다.</li>
</ul>

<p>2) 초기 관리자 비밀번호를 이용해 잠금 해제 필요합니다.</p>
<ul>
  <li>jenkins_home 폴더의 initialAdminPassword 파일에서 복사해옵니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">sudo cat</span> /var/lib/jenkins/secrets/initialAdminPassword
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="젠킨스2-플러그인-설치">젠킨스2 플러그인 설치</h2>
<ul>
  <li>로그인 된 페이지에서 Select plugins to install를 클릭합니다.</li>
  <li>기본 설정에 github, gitlab까지 추가 후 Install 시작합니다.</li>
  <li>Jenkins 관리 -&gt; 플러그인 관리에 들어가면 플러그인 추가 설치 하실 수 있습니다.</li>
</ul>

<p><br /></p>

<h2 id="프로젝트-빌드-및-배포">프로젝트 빌드 및 배포</h2>
<p>1) Jenkins 빌드 환경 구축<br />
2) 원격저장소(Gitlab)에 새로운 커밋 push 되면 Jenkins 통한 빌드(maven) 자동화<br />
3) 빌드 성공 시 배포(jar) 자동화</p>

<p><br /></p>

<h2 id="jenkins-플러그인-추가-설치">Jenkins 플러그인 추가 설치</h2>
<ul>
  <li>Publish Over SSH plugin</li>
  <li>Deploy to container - 젠킨스가 빌드한 결과물을 배포하기 위한 플러그인</li>
  <li>Post Build Task - 빌드 로그 기반으로 판단하여 스크립트나 shell 등을 실행하는 플러그인</li>
</ul>

<p><br /></p>

<h2 id="실습-순서">실습 순서</h2>
<p><strong>1. CI를 위한 도구 환경 설정 (JDK, Git, Maven)</strong></p>
<ul>
  <li>Jenkins 관리 &gt; Global Tool Configuration</li>
</ul>

<p><strong>2. Jenkins 와 Gitlab 연동</strong></p>

<p><strong>3. 프로젝트 생성</strong></p>
<ul>
  <li>소스 코드 관리 설정 (Gitlab 원격저장소 연동)</li>
  <li>빌드 트리거 설정</li>
  <li>빌드 설정</li>
  <li>배포 설정</li>
</ul>

<p><strong>4. 빌드 실행</strong></p>
<ul>
  <li>Build Now 기능 통해 실행</li>
</ul>

<p><br /></p>

<h2 id="1-ci를-위한-도구-환경-설정-jdk-git-maven">1. CI를 위한 도구 환경 설정 (JDK, Git, Maven)</h2>
<p>1) JAVA 설정</p>
<ul>
  <li>JDK 이미 설치되어 있으므로 install automatically 체크 해제합니다.</li>
  <li>EC2의 JAVA_HOME 위치를 직접 입력합니다.
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nb">echo</span> <span class="nv">$JAVA_HOME</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>2) Git 설정</p>
<ul>
  <li>Git 설치하지 않았으므로, install automatically 체크합니다.</li>
</ul>

<p>3) Maven 설정</p>
<ul>
  <li>Add Maven 버튼 선택합니다.</li>
  <li>Maven 3.6.0 입력 후 install automatically 체크합니다.</li>
  <li>하단의 Save 버튼을 선택합니다.</li>
</ul>

<p><br /></p>

<h2 id="2-jenkins-와-gitlab-연동">2. Jenkins 와 Gitlab 연동</h2>
<p>1) GitLab 에서 personal access token 생성</p>

<p>2) Jenkins에서 GitLab과 연동을 위한 Credential 추가</p>
<ul>
  <li>Security &gt; Manage Credentials</li>
  <li>(global) 클릭</li>
  <li>Add Credentials</li>
  <li>API token 에 access token 입력</li>
</ul>

<p>3) Jenkins 와 GitLab 연동</p>
<ul>
  <li>Jenkins 관리 &gt; 시스템 설정</li>
  <li>Gitlab 정보 입력</li>
</ul>

<p><br /></p>

<h2 id="3-프로젝트-생성">3. 프로젝트 생성</h2>
<p>1) 소스 코드 관리 설정 (Gitlab 원격 저장소 연동)</p>
<ul>
  <li>item 추가</li>
  <li>GitLab Connection 설정</li>
  <li>소스 코드 저장소 설정</li>
</ul>

<p>2) 빌드 트리거 설정</p>

<p>3) 빌드 설정</p>
<ul>
  <li>Add build step</li>
  <li>Invoke top-level Maven targets</li>
  <li>Goals : clean package</li>
</ul>

<p>4) 배포 설정</p>
<ul>
  <li>빌드 후 조치 설정</li>
  <li>post build task</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="nv">JENKINS_HOME</span><span class="o">=</span><span class="s2">"/var/lib/jenkins/"</span>
 <span class="nb">cd</span> <span class="nv">$JENKINS_HOME</span>
 
 <span class="nv">file</span><span class="o">=</span><span class="s2">"./RUNNING_PID"</span>
 
 <span class="k">if</span> <span class="o">[</span> <span class="nt">-e</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
     </span><span class="nv">pid</span><span class="o">=</span><span class="sb">`</span><span class="nb">cat</span> ./RUNNING_PID 2&gt; /dev/null<span class="sb">`</span>
     <span class="nb">kill</span> <span class="nv">$pid</span>
 <span class="k">else
     </span><span class="nb">echo</span> <span class="s2">"RUNNING_PID does not exists"</span>
 <span class="k">fi
 
 </span><span class="nb">nohup </span>java <span class="nt">-jar</span> ./workspace/first_deploy/target/TodoList-0.0.1-SNAPSHOT. jar 2&gt;&amp;1 &amp;
 <span class="nb">echo</span> <span class="nv">$!</span> <span class="o">&gt;</span> ./RUNNING_PID
</code></pre></div></div>

<p><br /></p>

<h2 id="4-빌드-실행">4. 빌드 실행</h2>
<p>1) Build now 버튼으로 빌드 실행
2) 콘솔 출력 확인
3) 서비스 접속</p>

<p><br /></p>

<h2 id="빌드-트리거-설정">빌드 트리거 설정</h2>
<p>어떤 조건이 되면, jenkins를 통해 빌드를 실행할 것인가?</p>
<ul>
  <li>Github에 새로운 커밋이 push되면, 빌드 자동 실행?</li>
</ul>

<p><br /></p>

<h2 id="webhook-방식">WebHook 방식</h2>
<ul>
  <li>web callback 혹은 HTTP push API</li>
  <li>앱이 다른 앱에 실시간 정보를 제공하는 방법입니다.</li>
</ul>

<p><br /></p>

<h2 id="jenkins-빌드-트리거-설정">Jenkins 빌드 트리거 설정</h2>
<ul>
  <li>빌드유발 &gt; Build when a change is pushed to GitLab</li>
  <li>[고급]버튼을 누르면, 내용이 확장됩니다.</li>
  <li>Generate 버튼을 통해 secret token을 생성합니다.</li>
  <li>저장 버튼 클릭합니다.</li>
</ul>

<p><br /></p>

<h2 id="gitlab-빌드-트리거-설정">GitLab 빌드 트리거 설정</h2>
<ul>
  <li>해당 프로젝트의 Settings &gt; Integrations 메뉴 접속합니다.</li>
  <li>Jenkins에서 복사한 URL, Token 값을 붙여 넣습니다.</li>
  <li>[Add webhook] 버튼 클릭 후 테스트를 진행합니다.</li>
  <li>Jenkins에서 build가 잘 되었는지 확인합니다.</li>
</ul>

<p><br /></p>
:ET