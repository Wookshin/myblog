I"Ӛ<p><br /></p>

<h1 id="객체-리터럴">객체 리터럴</h1>

<p><br /></p>

<h2 id="1-객체란">1. 객체란?</h2>

<p><br /></p>

<p>자바스크립트는 객체(object) 기반의 프로그래밍 언어이며, 자바스크립트를 구성하는 거의 “모든 것”이 객체입니다.<br />
원시 값을 제외한 나머지 값(함수, 배열, 정규표현식 등)은 모두 객체입니다.</p>

<p>원시 타입은 단 하나의 값만 나타내지만 객체 타입(object/reference type)은 다양한 타입의 값(원시 값 또는 다른 객체)을 하나의 단위로 구성한 복합적인 자료구조(data structure)입니다.<br />
또한, <strong>원시 타입의 값, 즉 원시 값은 변경 불가능한 값(immutable value)이지만 객체 타입의 값, 즉 객체는 변경 가능한 값(mutable value)입니다.</strong></p>

<p>객체는 0개 이상의 프로퍼티로 구성된 집합이며, 프로퍼티는 키와 값으로 구성됩니다.<br />
자바스크립트에서 사용할 수 있는 모든 값은 프로퍼티 값이 될 수 있습니다.<br />
자바스크립트의 함수는 일급 객체이므로 값으로 취급할 수 있습니다.<br />
따라서 함수도 프로퍼티 값으로 사용할 수 있습니다.<br />
프로퍼티 값이 함수일 경우, 일반 함수와 구분하기 위해 메서드(method)라 부릅니다.</p>

<p>객체는 프로퍼티와 메서드로 구성된 집합체입니다.</p>

<ul>
  <li>프로퍼티: 객체의 상태를 나타내는 값(data)</li>
  <li>메서드: 프로퍼티(상태 데이터)를 참조하고 조작할 수 있는 동작(behavior)</li>
</ul>

<p>이처럼 객체는 객체의 상태를 나타내는 값(프로퍼티)과 프로퍼티를 참조하고 조작할 수 있는 동작(메서드)을 모두 포함할 수 있기 때문에 상태와 동작을 하나의 단위로 구조화할 수 있어 유용합니다.</p>

<p><br /></p>

<blockquote>
  <p><strong>객체와 함수</strong><br />
자바스크립트의 객체는 함수와 밀접한 관계를 가집니다.<br />
함수로 객체를 생성하기도 하며 함수 자체가 객체이기도 합니다.<br />
자바스크립트에서 함수와 객체는 분리해서 생각할 수 없는 개념입니다.<br />
즉, 객체를 이해해야 함수를 제대로 이해할 수 있고, 반대로 함수를 이해해야 객체를 정확히 이해할 수 있습니다.</p>
</blockquote>

<p><br /><br /></p>

<h2 id="2-객체-리터럴에-의한-객체-생성">2. 객체 리터럴에 의한 객체 생성</h2>

<p>자바스크립트는 프로토타입 기반 객체지향 언어로서 클래스 기반 객체지향 언어와는 달리 다양한 객체 생성 방법을 지원합니다.</p>

<ul>
  <li>객체 리터럴</li>
  <li>Object 생성자 함수</li>
  <li>생성자 함수</li>
  <li>Object.create 메서드</li>
  <li>클래스(ES6)</li>
</ul>

<p>이러한 객체 생성 방법 중에서 가장 일반적이고 간단한 방법은 객체 리터럴을 사용하는 방법입니다.<br />
<strong>리터럴(literal)은 사람이 이해할 수 있는 문자 또는 약속된 기호를 사용하여 값을 생성하는 표기법</strong>을 말합니다.<br />
객체 리터럴은 객체를 생성하기 위한 표기법입니다.</p>

<p>객체 리터럴은 중괄호({…}) 내에 0개 이상의 프로퍼티를 정의합니다.<br />
변수에 할당되는 시점에 자바스크립트엔진은 객체 리터럴을 해석해 객체를 생성합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">sayHello</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Hello! My name is </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">.`</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">person</span><span class="p">);</span> <span class="c1">// object</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Lee", sayHello: ƒ}</span>
</code></pre></div></div>

<p><br /></p>

<p>만약 중괄호 내에 프로퍼티를 정의하지 않으면 빈 객체가 생성됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">empty</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// 빈 객체</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">empty</span><span class="p">);</span> <span class="c1">// object</span>
</code></pre></div></div>

<p><br /></p>

<p>객체 리터럴의 중괄호는 코드 블록을 의미하지 않는다는 데 주의합시다.<br />
코드 블록의 닫는 중괄호 뒤에는 세미 콜론을 붙이지 않습니다.<br />
하지만 객체 리터럴은 값으로 평가되는 표현식입니다.<br />
따라서 객체 리터럴의 닫는 중괄호 뒤에는 세미콜론을 붙입니다.</p>

<p>객체 리러럴은 자바스크립트의 유연함과 강력함을 대표하는 객체 생성 방식입니다.<br />
객체를 생성하기 위해 클래스를 먼저 정의하고 new 연산자와 함께 생성자를 호출할 필요가 없습니다.<br />
숫자 값이나 문자열을 만드는 것과 유사하게 리터럴로 객체를 생성합니다.<br />
객체 리터럴에 프로퍼티를 포함시켜 객체를 생성함과 동시에 프로퍼티를 만들 수도 있고, 객체를 생성한 이후로 프로퍼티를 동적으로 추가할 수도 있습니다.</p>

<p>객체 리터럴 외의 객체 생성 방식은 모두 함수를 사용해 객체를 생성합니다.</p>

<p><br /><br /></p>

<h2 id="3-프로퍼티">3. 프로퍼티</h2>

<p><strong>객체는 프로퍼티의 집합이며, 프로퍼티는 키와 값으로 구성됩니다.</strong></p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="c1">// 프로퍼티 키는 name, 프로퍼티 값은 'Lee'</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="c1">// 프로퍼티 키는 age, 프로퍼티 값은 20</span>
  <span class="na">age</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<p>프로퍼티를 나열할 때는 쉼표(,)로 구분합니다.<br />
일반적으로 마지막 프로퍼티 뒤에는 쉼표를 사용하지 않으나 사용해도 좋습니다.</p>

<ul>
  <li>프로퍼티 키: 빈 문자열을 포함하는 모든 문자열 또는 심벌 값</li>
  <li>프로퍼티 값: 자바스크립트에서 사용할 수 있는 모든 값</li>
</ul>

<p>프로퍼티 키는 프로퍼티 값에 접근할 수 있는 이름으로서 식별자 역할을 합니다.<br />
하지만 반드시 식별자 네이밍규칙을 따라야 하는 것은 아닙니다.<br />
단, 식별자 네이밍 규칙을 준수하는 프로퍼티 키와 그렇지 않은 프로퍼티 키는 미묘한 차이가 있습니다.</p>

<p>심벌 값도 프로퍼티 키로 사용할 수 있지만 일반적으로 문자열을 사용합니다.<br />
이때 프로퍼티 키는 문자열이므로 따옴표(‘…’ 또는 “…“)로 묶어야 합니다.<br />
하지만 식별자 네이밍 규칙을 준수하는 이름, 즉 자바스크립트에서 사용 가능한 유효한 이름인 경우 따옴표를 생략할 수 있습니다.<br />
반대로 말하면 <strong>식별자 네이밍 규칙을 따르지 않는 이름에는 반드시 따옴표를 사용해야 합니다.</strong></p>

<p>식별자 네이밍 규칙을 따르지 않는 프로퍼티 키를 사용하면 번거로운 일이 발생합니다.<br />
따라서 가급적 식별자 네이밍 규칙을 준수하는 프로퍼티 키를 사용할 것을 권장합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Ung-mo</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 식별자 네이밍 규칙을 준수하는 프로퍼티 키</span>
  <span class="dl">"</span><span class="s2">last-name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span> <span class="c1">// 식별자 네이밍 규칙을 준수하지 않는 프로퍼티 키</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {firstName: "Ung-mo", last-name: "Lee"}</span>
</code></pre></div></div>

<p><br /></p>

<p>프로퍼티 키로 사용한 firstName은 식별자 네이밍 규칙을 준수합니다.<br />
따라서 따옴표를 생략할 수 있습니다.<br />
하지만 last-name은 식별자 네이밍 규칙을 준수하지 않습니다.<br />
따라서 따옴표를 생략할 수 없습니다.<br />
자바스크립트 엔진은 따옴표를 생략한 last-name을 - 연산자가 있는 표현식으로 해석합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">firstName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Ung-mo</span><span class="dl">'</span><span class="p">,</span>
  <span class="nx">last</span><span class="o">-</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span> <span class="c1">// SyntaxError: Unexpected token -</span>
<span class="p">};</span>
</code></pre></div></div>

<p><br /></p>

<p>문자열 또는 문자열로 평가할 수 있는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수도 있습니다.<br />
이 경우에는 프로퍼티 키로 사용할 표현식을 대괄호([…])로 묶어야 합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
<span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">;</span>

<span class="c1">// ES5: 프로퍼티 키 동적 생성</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">world</span><span class="dl">"</span><span class="p">;</span>
<span class="c1">// ES6: 계산된 프로퍼티 이름</span>
<span class="c1">// var obj = { [key]: 'world' };</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {hello: "world"}</span>
</code></pre></div></div>

<p><br /></p>

<p>빈 문자열을 프로퍼티 키로 사용해도 에러가 발생하지 않습니다.<br />
하지만 키로서의 의미를 갖지 못하므로 권장하지 않습니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="dl">""</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span> <span class="c1">// 빈 문자열도 프로퍼티 키로 사용할 수 있다.</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// {"": ""}</span>
</code></pre></div></div>

<p><br /></p>

<p>프로퍼티 키에 문자열이나 심벌 값 외의 값을 사용하면 암묵적 타입 변환을 통해 문자열이 됩니다.<br />
예를 들어, 프로퍼티 키로 숫자 리터럴을 사용하면 따옴표는 붙지 않지만 내부적으로 문자열로 변환됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="mi">0</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="mi">2</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// {0: 1, 1: 2, 2: 3}</span>
</code></pre></div></div>

<p><br /></p>

<p>var, function과 같은 예약어를 프로퍼티 키로 사용해도 에러가 발생하지 않습니다.<br />
하지만 예상치 못한 에러가 발생할 여지가 있으므로 권장하지 않습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">var</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="na">function</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// {var: "", function: ""}</span>
</code></pre></div></div>

<p><br /></p>

<p>이미 존재하는 프로퍼티 키를 중복 선언하면 나중에 선언한 프로퍼티가 먼저 선언한 프로퍼티를 덮어씁니다.<br />
이때 에러가 발생하지 않는다는 점에 주의하세요.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Kim</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="4-메서드">4. 메서드</h2>

<p>프로퍼티 값이 함수일 경우 일반 함수와 구분하기 위해 메서드(method)라고 부릅니다.<br />
즉, <strong>메서드는 객체에 묶여 있는 함수를 의미</strong>합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">radius</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="c1">// ← 프로퍼티</span>

  <span class="c1">// 원의 지름</span>
  <span class="na">getDiameter</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ← 메서드</span>
    <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span> <span class="c1">// this는 circle을 가리킨다.</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">circle</span><span class="p">.</span><span class="nx">getDiameter</span><span class="p">());</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="5-프로퍼티-접근">5. 프로퍼티 접근</h2>

<p>프로퍼티에 접근하는 방법은 다음과 같이 두 가지입니다.</p>

<ul>
  <li>마침표 프로퍼티 접근 연산자(.)를 사용하는 마침표 표기법(dot notation)</li>
  <li>대괄호 프로퍼티 접근 연산자([…])를 사용하는 대괄호 표기법(bracket notation)</li>
</ul>

<p>프로퍼티 키가 식별자 네이밍 규칙을 준수하는 이름, 즉 자바스크립트에서 사용 가능한 유효한 이름이면 마침표 표기법과 대괄호 표기법을 모두 사용할 수 있습니다.</p>

<p>마침표 프로퍼티 접근 연산자 또는 대괄호 프로퍼티 접근 연산자의 좌측에는 객체로 평가되는 표현식을 기술합니다.<br />
마침표 프로퍼티 접근 연산자의 우측 또는 대괄호 프로퍼티 접근 연산자의 내부에는 프로퍼티 키를 지정합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// 마침표 표기법에 의한 프로퍼티 접근</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">// Lee</span>

<span class="c1">// 대괄호 표기법에 의한 프로퍼티 접근</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">]);</span> <span class="c1">// Lee</span>
</code></pre></div></div>

<p><br /></p>

<p>대괄호 표기법을 사용하는 경우 <strong>대괄호 프로퍼티 접근 연산자 내부에 지정하는 프로퍼티 키는 반드시 따옴표로 감싼 문자열</strong>이어야 합니다.<br />
대괄호 프로퍼티 접근 연산자 내에 따옴표로 감싸지 않는 이름을 프로퍼티 키로 사용하면 자바스크립트 엔진은 식별자로 해석합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">[</span><span class="nx">name</span><span class="p">]);</span> <span class="c1">// ReferenceError: name is not defined</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제에서 ReferenceError가 발생한 이유는 대괄호 연산자 내의 따옴표로 감싸지 않는 이름, 즉 식별자 name을 평가하기 위해 선언된 name을 찾았지만 찾지 못했기 때문입니다.<br />
<strong>객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환합니다.</strong><br />
이떄 ReferenceError가 발생하지 않는데 주의하세요.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span> <span class="c1">// undefined</span>
</code></pre></div></div>

<p><br /></p>

<p>프로퍼티 키가 식별자 네이밍 규칙을 준수하지 않는 이름, 즉 자바스크립트에서 사용 가능한 유효한 이름이 아니면 반드시 대괄호 표기법을 사용해야 합니다.<br />
단, 프로퍼티 키가 숫자로 이뤄진 문자열인 경우 따옴표를 생략할 수 있습니다.<br />
그 외의 대괄호 내에 들어가는 프로퍼티 키는 반드시 따옴표로 감싼 문자열이어야 한다는 점을 잊지 마세요.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="dl">'</span><span class="s1">last-name</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Lee</span><span class="dl">'</span><span class="p">,</span>
  <span class="mi">1</span><span class="p">:</span> <span class="mi">10</span>
<span class="p">};</span>

<span class="nx">person</span><span class="p">.</span><span class="dl">'</span><span class="s1">last-name</span><span class="dl">'</span><span class="p">;</span>  <span class="c1">// -&gt; SyntaxError: Unexpected string</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">last</span><span class="o">-</span><span class="nx">name</span><span class="p">;</span>    <span class="c1">// -&gt; 브라우저 환경: NaN</span>
                     <span class="c1">// -&gt; Node.js 환경: ReferenceError: name is not defined</span>
<span class="nx">person</span><span class="p">[</span><span class="nx">last</span><span class="o">-</span><span class="nx">name</span><span class="p">];</span>   <span class="c1">// -&gt; ReferenceError: last is not defined</span>
<span class="nx">person</span><span class="p">[</span><span class="dl">'</span><span class="s1">last-name</span><span class="dl">'</span><span class="p">];</span> <span class="c1">// -&gt; Lee</span>

<span class="c1">// 프로퍼티 키가 숫자로 이뤄진 문자열인 경우 따옴표를 생략할 수 있다.</span>
<span class="nx">person</span><span class="p">.</span><span class="mi">1</span><span class="p">;</span>     <span class="c1">// -&gt; SyntaxError: Unexpected number</span>
<span class="nx">person</span><span class="p">.</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">;</span>   <span class="c1">// -&gt; SyntaxError: Unexpected string</span>
<span class="nx">person</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>    <span class="c1">// -&gt; 10 : person[1] -&gt; person['1']</span>
<span class="nx">person</span><span class="p">[</span><span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">];</span>  <span class="c1">// -&gt; 10</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="6-프로퍼티-값-갱신">6. 프로퍼티 값 갱신</h2>

<p>이미 존재하는 프로퍼티에 값을 할당하면 프로퍼티 값이 갱신됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// person 객체에 name 프로퍼티가 존재하므로 name 프로퍼티의 값이 갱신된다.</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kim</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="7-프로퍼티-동적-생성">7. 프로퍼티 동적 생성</h2>

<p>존재하지 않는 프로퍼티에 값을 할당하면 프로퍼티가 동적으로 생성되어 추가되고 프로퍼티 값이 할당됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// person 객체에는 age 프로퍼티가 존재하지 않는다.</span>
<span class="c1">// 따라서 person 객체에 age 프로퍼티가 동적으로 생성되고 값이 할당된다.</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Lee", age: 20}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="8-프로퍼티-삭제">8. 프로퍼티 삭제</h2>

<p>delete 연산자는 객체의 프로퍼티를 삭제합니다.<br />
이떄 delete 연산자의 피연산자는 프로퍼티 값에 접근할 수 있는 표현식이어야 합니다.<br />
만약 존재하지 않는 프로퍼티를 삭제하면 아무런 에러 없이 무시됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// 프로퍼티 동적 생성</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="c1">// person 객체에 age 프로퍼티가 존재한다.</span>
<span class="c1">// 따라서 delete 연산자로 age 프로퍼티를 삭제할 수 있다.</span>
<span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">age</span><span class="p">;</span>

<span class="c1">// person 객체에 address 프로퍼티가 존재하지 않는다.</span>
<span class="c1">// 따라서 delete 연산자로 address 프로퍼티를 삭제할 수 없다. 이때 에러가 발생하지 않는다.</span>
<span class="k">delete</span> <span class="nx">person</span><span class="p">.</span><span class="nx">address</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Lee"}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="9-es6에서-추가된-객체-리터럴의-확장-기능">9. ES6에서 추가된 객체 리터럴의 확장 기능</h2>

<p>ES6에서는 더욱 간편하고 표현력 있는 객체 리터럴의 확장 기능을 제공합니다.</p>

<p><br /></p>

<h3 id="91-프로퍼티-축약-표현">9.1 프로퍼티 축약 표현</h3>

<p>객체 리터럴의 프로퍼티는 프로퍼티 키와 값으로 구성됩니다.<br />
프로퍼티 값은 변수에 할당된 값, 즉 식별자 표현식일 수도 있습니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES5</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">x</span><span class="p">:</span> <span class="nx">x</span><span class="p">,</span>
  <span class="na">y</span><span class="p">:</span> <span class="nx">y</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {x: 1, y: 2}</span>
</code></pre></div></div>

<p><br /></p>

<p>ES6에서는 프로퍼티 값으로 변수를 사용하는 경우 변수 이름과 프로퍼티 키가 동일한 이름일 때 프로퍼티 키를 생략(property shorthand)할 수 있습니다.<br />
이때 프로퍼티 키는 변수 이름으로 자동 생성됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES6</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

<span class="c1">// 프로퍼티 축약 표현</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {x: 1, y: 2}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="92-계산된-프로퍼티-이름">9.2 계산된 프로퍼티 이름</h3>

<p>문자열 또는 문자열로 타입 변환할 수 있는 값으로 평가되는 표현식을 사용해 프로퍼티 키를 동적으로 생성할 수도 있습니다.<br />
단, 프로퍼티 키로 사용할 표현식을 대괄호([…])로 묶어야 합니다.<br />
이를 계산된 프로퍼티 이름(computed property name)이라 합니다.</p>

<p>ES5에서 계산된 프로퍼티 이름으로 프로퍼티 키를 동적 생성하려면 객체 리터럴 외부에서 대괄호([…]) 표기법을 사용해야 합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES5</span>
<span class="kd">var</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">prop</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>

<span class="c1">// 계산된 프로퍼티 이름으로 프로퍼티 키 동적 생성</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">-</span><span class="dl">"</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">-</span><span class="dl">"</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">[</span><span class="nx">prefix</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">-</span><span class="dl">"</span> <span class="o">+</span> <span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<p><br /></p>

<p>ES6에서는 객체 리터럴 내부에서도 계산된 프로퍼티 이름으로 프로퍼티 키를 동적 생성할 수 있습니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES6</span>
<span class="kd">const</span> <span class="nx">prefix</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">prop</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">// 객체 리터럴 내부에서 계산된 프로퍼티 이름으로 프로퍼티 키 동적 생성</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
  <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
  <span class="p">[</span><span class="s2">`</span><span class="p">${</span><span class="nx">prefix</span><span class="p">}</span><span class="s2">-</span><span class="p">${</span><span class="o">++</span><span class="nx">i</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="nx">i</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span> <span class="c1">// {prop-1: 1, prop-2: 2, prop-3: 3}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="93-메서드-축약-표현">9.3 메서드 축약 표현</h3>

<p>ES5에서 메서드를 정의하려면 프로퍼티 값으로 함수를 할당합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES5</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">sayHi</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hi! </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi! Lee</span>
</code></pre></div></div>

<p><br /></p>

<p>ES6에서는 메서드를 정의할 때 function 키워드를 생략한 축약 표현을 사용할 수 있습니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// ES6</span>
<span class="kd">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
  <span class="c1">// 메서드 축약 표현</span>
  <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hi! </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Hi! Lee</span>
</code></pre></div></div>

<p><br /></p>

<p>ES6의 메서드 축약 표현으로 정의한 메서드는 프로퍼티에 할당한 함수와 다르게 동작합니다.</p>

<p><br /><br /><br /><br /></p>
:ET