I"Ѓ<p><br /></p>

<h1 id="let-const-키워드와-블록-레벨-스코프">let, const 키워드와 블록 레벨 스코프</h1>

<p><br /></p>

<h2 id="1-var-키워드로-선언한-변수의-문제점">1. var 키워드로 선언한 변수의 문제점</h2>

<p>ES5까지 변수를 선언할 수 있는 유일한 방법은 var 키워드를 사용하는 것이었습니다.<br />
var 키워드로 선언된 변수는 다음과 같은 특징이 있습니다.<br />
이는 다른 언어와는 구별되는 독특한 특징으로, 주의를 기울이지 않으면 심각한 문제를 발생시킬 수 있습니다.</p>

<h3 id="11-변수-중복-선언-허용">1.1 변수 중복 선언 허용</h3>

<p>var 키워드로 선언한 변수는 중복 선언이 가능합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.</span>
<span class="c1">// 초기화문이 있는 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="c1">// 초기화문이 없는 변수 선언문은 무시된다.</span>
<span class="kd">var</span> <span class="nx">y</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 100</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p><br /></p>

<p>위 예제의 var 키워드로 선언한 x 변수와 y 변수는 중복 선언되었습니다.<br />
이처럼 var 키워드로 선언한 변수를 중복 선언하면 초기화문(변수 선언과 동시에 초기값을 할당하는 문) 유무에 따라 다르게 동작합니다.<br />
초기화문이 있는 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작하고 초기화문이 없는 변수 선언문은 무시됩니다.<br />
이때 에러는 발생하지 않습니다.</p>

<p>위 예제와 같이 만약 동일한 이름의 변수가 이미 선언되어 있는 것을 모르고 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언도니 변수 값이 변경되는 부작용이 발생합니다.</p>

<p><br /></p>

<h3 id="12-함수-레벨-스코프">1.2 함수 레벨 스코프</h3>

<p>var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정합니다.<br />
따라서 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역 변수가 됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// x는 전역 변수다. 이미 선언된 전역 변수 x가 있으므로 x 변수는 중복 선언된다.</span>
  <span class="c1">// 이는 의도치 않게 변수값이 변경되는 부작용을 발생시킨다.</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p><br /></p>

<p>for 문의 변수 선언문에서 var 키워드로 선언한 변수도 전역 변수가 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="c1">// for문에서 선언한 i는 전역 변수이다. 이미 선언된 전역 변수 i가 있으므로 중복 선언된다.</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 0 1 2 3 4</span>
<span class="p">}</span>

<span class="c1">// 의도치 않게 i 변수의 값이 변경되었다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="c1">// 5</span>
</code></pre></div></div>

<p><br /></p>

<p>함수 레벨 스코프는 전역 변수를 남발할 가능성을 높입니다.<br />
이로 인해 의도치 않게 전역 변수가 중복 선언되는 경우가 발생합니다.</p>

<p><br /></p>

<h3 id="13-변수-호이스팅">1.3 변수 호이스팅</h3>

<p>var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이 스코프의 선두로 끌어 올려진 것처럼 동작합니다.<br />
즉, 변수 호이스팅에 의해 var 키워드로 선언한 변수는 변수 선언문 이전에 참조할 수 있습니다.<br />
단, 할당문 이전에 변수를 참조하면 언제나 undefined를 반환합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 이 시점에는 변수 호이스팅에 의해 이미 foo 변수가 선언되었다(1. 선언 단계)</span>
<span class="c1">// 변수 foo는 undefined로 초기화된다. (2. 초기화 단계)</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="c1">// 변수에 값을 할당(3. 할당 단계)</span>
<span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 123</span>

<span class="c1">// 변수 선언은 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 실행된다.</span>
<span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<p>변수 선언문 이전에 변수를 참조하는 것은 변수 호이스팅에 의해 에러를 발생시키지는 않지만 프로그램의 흐름상 맞지 않을뿐더러 가독성을 떨어뜨리고 오류를 발생시킬 여지를 남깁니다.</p>

<p><br /><br /></p>

<h2 id="2-let-키워드">2. let 키워드</h2>

<p>앞에서 살펴본 var 키워드의 단점을 보완하기 위해 ES6에서는 새로운 변수 선언 키워드인 let과 const를 도입했습니다.<br />
var 키워드와의 차이점을 중심으로 let 키워드를 살펴봅시다.</p>

<p><br /></p>

<h3 id="21-변수-중복-선언-금지">2.1 변수 중복 선언 금지</h3>

<p>var 키워드로 이름이 동일한 변수를 중복 선언하면 아무런 에러가 발생하지 않습니다.<br />
이때 변수를 중복 선언하면서 값까지 할당했다면 의도치 않게 먼저 선언된 변수 값이 재할당되어 변경되는 부작용이 발생합니다.<br />
하지만 let 키워드로 이름이 같은 변수를 중복 선언하면 문법 에러(SyntaxError)가 발생합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="c1">// var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용한다.</span>
<span class="c1">// 아래 변수 선언문은 자바스크립트 엔진에 의해 var 키워드가 없는 것처럼 동작한다.</span>
<span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>

<span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">123</span><span class="p">;</span>
<span class="c1">// let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.</span>
<span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span> <span class="c1">// SyntaxError: Identifier 'bar' has already been declared</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="22-블록-레벨-스코프">2.2 블록 레벨 스코프</h3>

<p>var 키워드로 선언한 변수는 오로지 함수의 코드 블록만을 지역 스코프로 인정하는 함수 레벨 스코프를 따릅니다.<br />
하지만 let 키워드로 선언한 변수는 모든 코드 블록(함수, if 문, for 문, while 문, try/catch 문 등)을 지역 스코프로 인정하는 블록 레벨 스코프(block-level scope)를 따릅니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역 변수</span>

<span class="p">{</span>
  <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역 변수</span>
  <span class="kd">let</span> <span class="nx">bar</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">// 지역 변수</span>
<span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">bar</span><span class="p">);</span> <span class="c1">// ReferenceError: bar is not defined</span>
</code></pre></div></div>

<p><br /></p>

<p>let 키워드로 선언된 변수는 블록 레벨 스코프를 따릅니다.<br />
따라서 위 예제의 코드 블록 내에서 선언된 foo 변수와 bar 변수는 지역 변수입니다.<br />
전역에서 선언된 foo 변수와 코드 블록 내에서 선언된 foo 변수는 다른 별개의 변수입니다.<br />
또한 bar 변수도 블록 레벨 스코프를 갖는 지역 변수입니다.<br />
따라서 전역에서는 bar 변수는 참조할 수 없습니다.</p>

<p>함수도 코드 블록이므로 스코프를 만듭니다.<br />
이때 함수 내의 코드 블록은 함수 레벨 스코프에 중첩됩니다.</p>

<p><br /></p>

<h3 id="23-변수-호이스팅">2.3 변수 호이스팅</h3>

<p>var 키워드로 선언한 변수와 달리 let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 동작합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
<span class="kd">let</span> <span class="nx">foo</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<p>이처럼 let 키워드로 선언한 변수를 변수 선언문 이전에 참조하면 참조 에러(ReferenceError)가 발생합니다.<br />
var 키워드로 선언한 변수는 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 “선언 단계”와 “초기화 단계”가 한번에 진행됩니다.</p>

<p>즉, 선언 단계에서 스코프(실행 컨텍스트의 렉시컬 환경, lexical Environment)에 변수 식별자를 등록해 자바스크립트 엔진에 변수의 존재를 알립니다.<br />
그리고 즉시 초기화 단계에서 undefined로 변수를 초기화합니다.</p>

<p>따라서 변수 선언문 이전에 변수에 접근해도 스코프에 변수가 존재하기 때문에 에러가 발생하지 않습니다.<br />
다만 undefined를 반환합니다.<br />
이후 변수 할당문에 도달하면 비로소 값이 할당됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// var 키워드로 선언한 변수는 런타임 이전에 선언 단계와 초기화 단계가 실행된다.</span>
<span class="c1">// 따라서 변수 선언문 이전에 변수를 참조할 수 있다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="kd">var</span> <span class="nx">foo</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 할당문에서 할당 단계가 실행된다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p><strong>let 키워드로 선언한 변수는 “선언 단계”와 “초기화 단계”가 분리되어 진행됩니다.</strong><br />
즉, 런타임 이전에 자바스크립트 엔진에 의해 암묵적으로 선언 단계가 먼저 실행되지만 초기화 단계는 변수 선언문에 도달했을 때 실행됩니다.</p>

<p>만약 초기화 단계가 실행되기 이전에 변수게 접근하려고 하면 참조 에러(ReferenceError)가 발생합니다.<br />
let 키워드로 선언한 변수는 스코프의 시작 지점부터 초기화 단계 시작 지점(변수 선언문)까지 변수를 참조할 수 없습니다.<br />
스코프의 시작 지점부터 초기화 시작 지점까지 변수를 참조할 수 없는 구간을 일시적 사각지대(Temporal Dead Zone:TDZ)라고 부릅니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 런타임 이전에 선언 단계가 실행된다. 아직 변수가 초기화되지 않았다.</span>
<span class="c1">// 초기화 이전의 일시적 사각 지대에서는 변수를 참조할 수 없다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>

<span class="kd">let</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// 변수 선언문에서 초기화 단계가 실행된다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// undefined</span>

<span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 할당문에서 할당 단계가 실행된다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p><br /></p>

<p>결국 let 키워드로 선언한 변수는 변수 호이스팅이 발생하지 않는 것처럼 보입니다.<br />
하지만 그렇지 않습니다.<br />
다음 예제를 살펴봅시다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 전역 변수</span>

<span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization</span>
  <span class="kd">let</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// 지역 변수</span>
<span class="p">}</span>
</code></pre></div></div>

<p>let 키워드로 선언한 변수의 경우 변수 호이스팅이 발생하지 않는다면 위 예제는 전역 변수 foo의 값을 출력해야 합니다.<br />
하지만 let 키워드로 선언한 변수도 여전히 호이스팅이 발생하기 때문에 참조 에러(ReferenceError)가 발생합니다.</p>

<p>자바스크립트는 ES6에서 도입된 let, const를 포함해서 모든 선언(var, let, const, function, funtion*, class 등)을 호이스팅합니다.<br />
단, ES6에서 도입된 let, const, class를 사용한 선언문은 호이스팅이 발생하지 않는 것처럼 동작합니다.</p>

<p><br /></p>

<h3 id="24-전역-객체와-let">2.4 전역 객체와 let</h3>

<p>var 키워드로 선언한 전역 변수와 전역 함수, 그리고 선언하지 않은 변수에 값을 할당한 암묵적 전역은 전역 객체 window의 프로퍼티가 됩니다.<br />
전역 객체의 프로퍼티를 참조할 때 window를 생략할 수 있습니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 이 예제는 브라우저 환경에서 실행해야 한다.</span>

<span class="c1">// 전역 변수</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">// 암묵적 전역</span>
<span class="nx">y</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="c1">// 전역 함수</span>
<span class="kd">function</span> <span class="nx">foo</span><span class="p">()</span> <span class="p">{}</span>

<span class="c1">// var 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="c1">// 전역 객체 window의 프로퍼티는 전역 변수처럼 사용할 수 있다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>

<span class="c1">// 암묵적 전역은 전역 객체 window의 프로퍼티다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">y</span><span class="p">);</span> <span class="c1">// 2</span>

<span class="c1">// 함수 선언문으로 정의한 전역 함수는 전역 객체 window의 프로퍼티다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ƒ foo() {}</span>
<span class="c1">// 전역 객체 window의 프로퍼티는 전역 변수처럼 사용할 수 있다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ƒ foo() {}</span>
</code></pre></div></div>

<p><br /></p>

<p>let 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 아닙니다.<br />
즉, window.foo와 같이 접근할 수 없습니다.</p>

<p>let 전역 변수는 보이지 않는 개념적인 블록(전역 렉시컬 환경의 선언적 환경 레코드) 내에 존재하게 됩니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 이 예제는 브라우저 환경에서 실행해야 한다.</span>
<span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="c1">// let, const 키워드로 선언한 전역 변수는 전역 객체 window의 프로퍼티가 아니다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// undefined</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p><br /><br /></p>

<h2 id="3-const-키워드">3. const 키워드</h2>

<p>const 키워드는 상수(constant)를 선언하기 위해 사용합니다.<br />
하지만 반드시 상수만을 위해 사용하지는 않습니다.<br />
const 키워드의 특징은 let 키워드와 대부분 동일하므로 let 키워드와 다른 점을 중심으로 살펴봅시다.</p>

<p><br /></p>

<h3 id="31-선언과-초기화">3.1 선언과 초기화</h3>

<p><strong>const 키워드로 선언한 변수는 반드시 선언과 동시에 초기화해야 합니다.</strong></p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p><br /></p>

<p>그렇지 않으면 다음과 같이 문법 에러가 발생합니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">const</span> <span class="nx">foo</span><span class="p">;</span> <span class="c1">// SyntaxError: Missing initializer in const declaration</span>
</code></pre></div></div>

<p><br /></p>

<p>const 키워드로 선언한 변수는 let 키워드로 선언한 변수와 마찬가지로 블록 레벨 스코프를 가지며, 변수 호이스팅이 발생하지 않는 것처럼 동작합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">{</span>
  <span class="c1">// 변수 호이스팅이 발생하지 않는 것처럼 동작한다</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: Cannot access 'foo' before initialization</span>
  <span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="p">}</span>

<span class="c1">// 블록 레벨 스코프를 갖는다.</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// ReferenceError: foo is not defined</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="32-재할당-금지">3.2 재할당 금지</h3>

<p>var 또는 let 키워드로 선언한 변수는 재할당이 자유로우나 <strong>const 키워드로 선언한 변수는 재할당이 금지됩니다.</strong></p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">const</span> <span class="nx">foo</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="nx">foo</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// TypeError: Assignment to constant variable.</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="33-상수">3.3 상수</h3>

<p>const 키워드로 선언한 변수에 원시 값을 할당한 경우 변수 값을 변경할 수 없습니다.<br />
원시 값은 변경 불가능한 값(immutable value)이므로 재할당 없이 값을 변경할 수 있는 방법이 없기 때문입니다.<br />
이러한 특징을 이용해 const 키워드를 상수를 표현하는 데 사용하기도 합니다.</p>

<p>변수의 상대 개념인 <strong>상수는 재할당이 금지된 변수를 말합니다.</strong><br />
상수도 값을 저장하기 위한 메모리 공간이 필요하므로 변수라고 할 수 있습니다.<br />
단, 변수는 재할당을 통해 변수 값을 변경할 수 있지만 상수는 재할당이 금지됩니다.</p>

<p>상수는 상태 유지와 가독성, 유지보수의 편의를 위해 적극적으로 사용해야 합니다.<br />
다음 예제를 살펴봅시다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 세전 가격</span>
<span class="kd">let</span> <span class="nx">preTaxPrice</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// 세후 가격</span>
<span class="c1">// 0.1의 의미를 명확히 알기 어렵기 때문에 가독성이 좋지 않다.</span>
<span class="kd">let</span> <span class="nx">afterTaxPrice</span> <span class="o">=</span> <span class="nx">preTaxPrice</span> <span class="o">+</span> <span class="nx">preTaxPrice</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">afterTaxPrice</span><span class="p">);</span> <span class="c1">// 110</span>
</code></pre></div></div>

<p><br /></p>

<p>코드 내에서 사용한 0.1은 어떤 의미로 사용했는지 명확히 알기 어렵기 때문에 가독성이 좋지 않습니다.<br />
또한 세율을 의미하는 0.1은 쉽게 바뀌지 않는 값이며, 프로그램 전체에서 고정된 값을 사용해야 합니다.<br />
이때 세율을 상수로 정의하면 값의 의미를 쉽게 파악할 수 있고 변경할 수 없는 고정값으로 사용할 수 있습니다.</p>

<p>const 키워드로 선언된 변수는 재할당이 금지됩니다.<br />
<strong>const 키워드로 선언된 변수에 원시 값을 할당한 경우 원시 값은 변경할 수 없는 값(immutable value)이고 const 키워드에 의해 재할당이 금지되므로 할당된 값을 변경할 수 있는 방법은 없다.</strong></p>

<p>또한 상수는 프로그램 전체에서 공통적으로 사용하므로 나중에 세율이 변경되면 상수만 변경하면 되기 때문에 유지보수성이 대폭 향상됩니다.</p>

<p>일반적으로 상수의 이름은 대문자로 선언해 상수임을 명확히 나타냅니다.<br />
어떤 단어로 이뤄진 경우에는 언더스코어(_)로 구분해서 스네이크 케이스로 표현하는 것이 일반적입니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="c1">// 세율을 의미하는 0.1은 변경할 수 없는 상수로서 사용될 값이다.</span>
<span class="c1">// 변수 이름을 대문자로 선언해 상수임을 명확히 나타낸다.</span>
<span class="kd">const</span> <span class="nx">TAX_RATE</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">;</span>

<span class="c1">// 세전 가격</span>
<span class="kd">let</span> <span class="nx">preTaxPrice</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

<span class="c1">// 세후 가격</span>
<span class="kd">let</span> <span class="nx">afterTaxPrice</span> <span class="o">=</span> <span class="nx">preTaxPrice</span> <span class="o">+</span> <span class="nx">preTaxPrice</span> <span class="o">*</span> <span class="nx">TAX_RATE</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">afterTaxPrice</span><span class="p">);</span> <span class="c1">// 110</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="34-const-키워드와-객체">3.4 const 키워드와 객체</h3>

<p>const 키워드로 선언된 변수에 원시 값을 할당한 경우 값을 변경할 수 없습니다.<br />
하지만 <strong>const 키워드로 선언된 변수에 객체를 할당한 경우 값을 변경할 수 있습니다.</strong></p>

<p>변경 불가능한 값인 원시 값은 재할당 없이 변경(교체)할 수 있는 방법이 없지만 변경 가능한 값인 객체는 재할당 없이도 직접 변경이 가능하기 때문입니다.</p>

<p><br /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="kd">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Lee</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>

<span class="c1">// 객체는 변경 가능한 값이다. 따라서 재할당없이 변경이 가능하다.</span>
<span class="nx">person</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Kim</span><span class="dl">"</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">person</span><span class="p">);</span> <span class="c1">// {name: "Kim"}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>const 키워드는 재할당을 금지할 뿐 “불변”을 의미하지는 않습니다.</strong><br />
다시 말해, 새로운 값을 재할당하는 것은 불가능하지만 프로퍼티 동적 생성, 삭제, 프로퍼티 값의 변경을 통해 객체를 변경하는 것은 가능합니다.<br />
이때 객체가 변경되더라도 변수에 할당된 참조 값은 변경되지 않습니다.</p>

<p><br /><br /></p>

<h2 id="4-var-vs-let-vs-const">4. var vs. let vs. const</h2>

<p>변수 선언에는 기본적으로 const를 사용하고 let은 재할당이 필요한 경우에 한정해 사용하는 것이 좋습니다.<br />
const 키워드를 사용하면 의도치 않은 재할당을 방지하기 때문에 좀 더 안전합니다.</p>

<p>var와 let, const 키워드는 다음과 같이 사용하는 것을 권장합니다.</p>

<ul>
  <li>ES6를 사용한다면 var 키워드는 사용하지 않습니다.</li>
  <li>재할당이 필요한 경우에 한정해 let 키워드를 사용합니다. 이떄 변수의 스코프를 최대한 좁게 만듭니다.</li>
  <li>변경이 발생하지 않고 읽기 전용으로 사용하는(재할당이 필요 없는 상수) 원시 값과 객체에는 const 키워드를 사용합니다. const 키워드는 재할당을 금지하므로 var, let 키워드보다 안전합니다.</li>
</ul>

<p>변수를 선언하는 시점에는 재할당이 필요할지 잘 모르는 경우가 많습니다.<br />
 그리고 객체는 의외로 재할당하는 경우가 드뭅니다.</p>

<p>따라서 변수를 선언할 때는 일단 const 키워드를 사용합시다.<br />
 반드시 재할당이 필요하다면(반드시 재할당이 필요한지 한번 생각해 볼 일입니다) 그때 const 키워드를 let 키워드로 변경해도 결코 늦지 않습니다.</p>

<p><br /><br /><br /><br /><br /></p>
:ET