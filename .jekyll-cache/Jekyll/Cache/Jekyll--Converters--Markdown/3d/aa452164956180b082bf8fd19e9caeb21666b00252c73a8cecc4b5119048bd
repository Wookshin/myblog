I"ue<p><br /></p>

<h1 id="git-용어-정리">Git 용어 정리</h1>
<p><br /></p>

<p><strong><em>Git에서 활용되는 용어를 정리합니다.</em></strong><br />
<br />
<br />
<br /></p>

<h2 id="원격-저장소remote-repository">원격 저장소(Remote Repository)</h2>
<p>서버에 구축된 저장소</p>

<p><br /></p>

<h2 id="로컬-저장소local-repository">로컬 저장소(Local Repository)</h2>
<p>각각의 개발자들이 본인 PC에 구축한 저장소</p>

<p><br /></p>

<h2 id="클론clone">클론(Clone)</h2>
<p>원격 저장소의 소스코드를 로컬 저장소에 복사하는 과정 
서버 오류로 인한 데이터 손실 시, 로컬 저장소의 데이터로 복구 가능(현재 버전 뿐만 아니라 모든 히스토리를 복사해온다.)</p>

<p><br /></p>

<h2 id="작업-디렉토리working-directory">작업 디렉토리(Working Directory)</h2>
<p>PC에서 현재 작업중에 있는 디렉토리
개발자 작업시 프로젝트의 히스토리가 쌓이는 공간
Git에서 관리는 하지만, 추적은 하지 않음</p>

<p><br /></p>

<h2 id="스테이징-영역staging-area">스테이징 영역(Staging Area)</h2>
<p>작업 디렉토리 상의 변경점이 올라가는 임시 저장 영역
git에 의해 변경점 추적 관리되는 영역
커밋을 준비하고 검토 할 수 있는 중간 영역</p>

<p><br /></p>

<h2 id="로컬-저장소local-repository-1">로컬 저장소(Local Repository)</h2>
<p>커밋들이 영구적으로 저장되는 영역
원격저장소로 부터 복사(clone)한 커밋들이 존재하는 영역</p>

<p><br /></p>

<h2 id="커밋commit">커밋(Commit)</h2>
<p>Git에서 가장 의미있는 변경의 최소 단위<br />
변경의 단위는 개발자마다 조직마다 모두 다르다.<br />
“커밋하다”스테이징 영역의 변경점을 로컬 저장소로 저장하는 과정</p>

<p><br /></p>

<h2 id="git-기본-플로우">Git 기본 플로우</h2>
<ol>
  <li>원격저장소에서 로컬 저장소로 소스코드 복사</li>
  <li>개발 시작(로컬 저장소 내 작업 디렉토리에서 변경점 생성)</li>
  <li>발생한 변경점을 스테이지 영역에 추가(add)</li>
  <li>의미있는 변경점이 쌓이면 최종 커밋 생성(commit)</li>
  <li>로컬 저장소에 영구적으로 저장</li>
</ol>

<p><br /></p>

<h2 id="pull">Pull</h2>
<p>원격저장소에 있는 다른 개발자의 커밋들을 받아온다.</p>

<p><br /></p>

<h2 id="push">Push</h2>
<p>로컬저장소에서 만든 커밋을 원격저장소로 업로드 한다.</p>

<p><br /></p>

<h2 id="사용자의-이름-이메일-기본-설정">사용자의 이름, 이메일 기본 설정</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git config <span class="nt">--global</span> user.name <span class="s2">"Wookshin"</span>
 git config <span class="nt">--global</span> user.email <span class="s2">"cotlsdnr1@gmail.com"</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="설정-정보-확인">설정 정보 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git config <span class="nt">--global</span> <span class="nt">--list</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="vi-에디터를-통해-직접-수정하는-방법">vi 에디터를 통해 직접 수정하는 방법</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> vi ~/.gitconfig
</code></pre></div></div>

<p><br /></p>

<h2 id="fork">Fork</h2>
<p>상대방의 원격저장소(Github)를 나의 원격저장소(Github)에 복사한다.</p>

<p><br /></p>

<h2 id="git-init">git init</h2>
<p>Git의 핵심 폴더인 .git 폴더가 생성
master라는 기본 브랜치 생성</p>

<p><br /></p>

<h2 id="원격-저장소와-연결하기">원격 저장소와 연결하기</h2>
<p>git remote add [저장소별칭] [저장소 주소]</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git remote add origin https://gitlab.com/wookshin/myfirstproject.git
</code></pre></div></div>

<p><br /></p>

<h2 id="현재-저장소에-등록된-원격-저장소-이름-확인">현재 저장소에 등록된 원격 저장소 이름 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git remote
</code></pre></div></div>

<p><br /></p>

<h2 id="현재-저장소에-등록된-원격-저장소의-url-상세-확인">현재 저장소에 등록된 원격 저장소의 URL 상세 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git remote <span class="nt">-v</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="저장소-이름-변경">저장소 이름 변경</h2>
<p>git remote rename [현재 저장소별칭] [변경할 저장소 별칭]</p>

<p><br /></p>

<h2 id="현재-폴더-내-파일의-상태-확인하기">현재 폴더 내 파일의 상태 확인하기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git status
</code></pre></div></div>

<p><br /></p>

<h2 id="커밋의-히스토리-확인하기">커밋의 히스토리 확인하기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log
</code></pre></div></div>

<p><br /></p>

<h2 id="untracked">Untracked</h2>
<p>Git에 의해 관리되지 않은 파일
단 한번도 스테이징 영역(staging area)에 포함되지 않은 파일</p>

<p><br /></p>

<h2 id="tracked">Tracked</h2>
<p>Git에 의해 관리되는 파일
한 번 이상 스테이징 영역(staging area)에 포함된 적 있는 파일</p>

<p><br /></p>

<h2 id="스테이징-영역에-변경점-추가">스테이징 영역에 변경점 추가</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git add TestService.java
</code></pre></div></div>
<p>작업 디렉토리의 변경점 중 커밋 예정인 파일들은 스테이징 영역에 추가합니다.</p>

<p><br /></p>

<h2 id="커밋-생성">커밋 생성</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git commit
</code></pre></div></div>
<p>의미있는 변경 단위라고 판단되면, 로컬 저장소에 영구적으로 저장한다.</p>

<p><br /></p>

<h2 id="커밋-히스토리-확인">커밋 히스토리 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log
</code></pre></div></div>
<p>commit : 커밋의 ID(SHA-1 hash 값을 키값으로 저장)<br />
Author : 커밋 반영한 담당자 정보<br />
Date : 커밋 반영 날짜와 시간</p>

<p><br /></p>

<h2 id="커밋-히스토리-확인-2">커밋 히스토리 확인 2</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git show b076a
</code></pre></div></div>
<p>git show {commit id}</p>

<p><br /></p>

<h2 id="commit-시-git이-데이터를-저장하는-장소">Commit 시 git이 데이터를 저장하는 장소</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> find .git/objects <span class="nt">-type</span> f
</code></pre></div></div>

<p><br /></p>

<h2 id="hash로-된-파일-내용-확인하기">hash로 된 파일 내용 확인하기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git cat-file <span class="nt">-p</span> <span class="o">[</span>방금 생성한 커밋의 sha-1 hash값] <span class="c">#파일의 내용  </span>
 git cat-file <span class="nt">-t</span> <span class="o">[</span>방금 생성한 커밋의 sha-1 hash값] <span class="c">#파일의 타입  </span>

 git cat-file <span class="nt">-p</span> <span class="o">[</span>tree, sha-1 hash값] <span class="c">#파일의 내용  </span>
 git cat-file <span class="nt">-t</span> <span class="o">[</span>tree, sha-1 hash값] <span class="c">#파일의 타입  </span>

 git cat-file <span class="nt">-p</span> <span class="o">[</span>blob, sha-1 hash값] <span class="c">#파일의 내용  </span>
 git cat-file <span class="nt">-t</span> <span class="o">[</span>blob, sha-1 hash값] <span class="c">#파일의 타입  </span>
</code></pre></div></div>

<p>BLOB : 바이너리 데이터 자체만 저장된 BLOB 객체 (Binary Large Object)</p>

<p><br /></p>

<h2 id="변경된-코드-확인">변경된 코드 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git diff
</code></pre></div></div>
<p>작업 디렉토리에서 기존 코드 대비 변경점 확인<br />
변경점이 적은 경우 쉽게 바로 파악이 가능하지만, 변경점이 많은 경우 변경점 파악이 어려움</p>

<p><br /></p>

<h2 id="변경된-코드-확인-2">변경된 코드 확인 2</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git difftool
</code></pre></div></div>

<p><br /></p>

<h2 id="difftool-설정">difftool 설정</h2>
<p>1) 외부 도구 설정 (예, Beyond Compare)<br />
2) 설치 후 실행 파일 위치 확인<br />
3) git config 를 통해 실행파일 path 등록</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git config <span class="nt">--global</span> difftool.bc4.path <span class="s1">'C:\Program Files\Beyond Compare 4\BCompare.exe'</span>
</code></pre></div></div>
<p>4) 기본 difftool로 bc4 설정</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git config <span class="nt">--global</span> diff.tool bc4
</code></pre></div></div>
<p>Beyond Compare 설치 : https://www.scootersoftware.com/</p>

<p><br /></p>

<h2 id="unstaged-변경">unstaged 변경</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git restore <span class="nt">--staged</span> MainService.java
</code></pre></div></div>
<p>잘못 staged 된 파일을 unstaged 로 변경하기</p>

<p><br /></p>

<h2 id="git-명령어-옵션-정보-확인">Git 명령어 옵션 정보 확인</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">--help</span>
</code></pre></div></div>
<p>명령어 뒤에 –help 옵션을 입력하면,<br />
웹 브라우저를 통해 해당 명령어의 메뉴얼 페이지가 실행됩니다.</p>

<p><br /></p>

<h2 id="커밋-되돌리기">커밋 되돌리기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git commit <span class="nt">--amend</span>
</code></pre></div></div>
<p>마지막 반영한 최신 커밋 메시지를 변경하고 싶을 때,<br />
최신 커밋 수정 가능한 에디터가 실행됩니다.</p>

<p><br /></p>

<h2 id="코드의-원복">코드의 원복</h2>
<p>git에서는 원복의 단위가 커밋이다. <br />
git revert ‘마지막에 반영한 commit ID’</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git revert 9bb3a9f
</code></pre></div></div>

<p><br /></p>

<h2 id="원격-저장소에-커밋-반영하기">원격 저장소에 커밋 반영하기</h2>
<p>git push [저장소 별칭] [브랜치]</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git push origin master
</code></pre></div></div>

<p><br /></p>

<h2 id="원격-저장소의-커밋을-로컬-저장소로-가져오기">원격 저장소의 커밋을 로컬 저장소로 가져오기</h2>
<p>git pull [저장소 별칭] [브랜치]</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git pull origin master
</code></pre></div></div>

<p><br /></p>

<h2 id="원격로컬-저장소-생성-방법-2가지">원격/로컬 저장소 생성 방법 2가지</h2>
<p>방법1</p>
<ol>
  <li>로컬저장소 폴더 생성</li>
  <li>로컬저장소 초기화(git init)</li>
  <li>원격저장소와 연결(git remote add)</li>
</ol>

<p>방법2</p>
<ol>
  <li>로컬저장소 폴더 생성</li>
  <li>원격저장소 복사(git clone)</li>
</ol>

<p><br /></p>

<h2 id="git-log-역순으로-보기">git log 역순으로 보기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">--reverse</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="커밋-히스토리-관련-옵션">커밋 히스토리 관련 옵션</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">-p</span>   <span class="c">#코드의 변경점도 같이 보여준다</span>
 git log <span class="nt">-p</span> <span class="nt">-2</span>   <span class="c">#가장 최신 로그 2개를 보여준다</span>
 git log <span class="nt">-u</span>   <span class="c">#-p와 동일하면 역할 (코드의 변경점도 보여준다)</span>
 git log <span class="nt">-u</span> <span class="s1">'commit ID'</span>   <span class="c">#특정 커밋의 로그를 보여준다</span>
 git log <span class="nt">-1</span>   <span class="c">#가장 최신 로그 1개를 보여준다</span>
 git log <span class="nt">-2</span>   <span class="c"># 가장 최신 로그 2개를 보여준다</span>
 git log <span class="nt">--name-only</span>   <span class="c">#커밋대상 파일 리스트를 보여준다</span>
 git log <span class="nt">--oneline</span>   <span class="c">#각 커밋 로그를 한줄로 보여준다</span>
 git show <span class="s1">'commit ID'</span>   <span class="c">#특정 커밋의 자세한 정보를 보여준다(diff 기능)</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="커밋-히스토리-관련-옵션-2">커밋 히스토리 관련 옵션 2</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">--author</span> <span class="s1">'torvalds'</span>
 git log <span class="nt">--since</span><span class="o">=</span>2.weeks
 git log <span class="nt">--grep</span> <span class="s1">'...'</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="브랜치branch">브랜치(branch)</h2>
<p>기본 브랜치로부터 파생한 독립적인 작업 공간입니다.<br />
<strong>최신 커밋을 가리키는 일종의 포인터</strong>입니다.<br />
매우 가볍습니다.<br />
생성, 이동, 병합(merge)이 매우 쉽습니다.</p>

<p><br /></p>

<h2 id="현재-작업-중인-브랜치-확인하는-명령어">현재 작업 중인 브랜치 확인하는 명령어</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git branch
</code></pre></div></div>
<p>첫 번째 커밋을 만들어야 브랜치가 생성된 커밋을 가리킬 수 있다.</p>

<p><br /></p>

<h2 id="head">HEAD</h2>
<p><strong>현재 브랜치를 가리키는 일종의 포인터</strong><br />
현재 브랜치의 마지막 커밋에 대한 스냅샷</p>

<p><br /></p>

<h2 id="브랜치-생성">브랜치 생성</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git branch feature-login   <span class="c">#새로 생성할 브랜치명</span>
 git branch   <span class="c">#현재 브랜치 확인</span>
 git log   <span class="c">#브랜치가 어떤 커밋을 가르키고 있는지 확인</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="브랜치-이동">브랜치 이동</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git checkout feature-login   <span class="c">#브랜치 이동(HEAD 이동)</span>
 git branch   <span class="c">#현재 브랜치 확인</span>
 git log   <span class="c">#브랜치가 어떤 커밋을 가르키고 있는지 확인</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="checkout">Checkout</h2>
<p>HEAD는 checkout 대상 브랜치로 이동합니다.<br />
로컬 저장소의 상태는 HEAD가 가리키는 마지막 커밋이 최신이 됩니다.<br />
작업 디렉토리의 파일 상태도 변경됩니다.</p>

<p><br /></p>

<h2 id="전체-브랜치의-로그를-확인하기-그래프로-한-라인으로">전체 브랜치의 로그를 확인하기 (그래프로, 한 라인으로)</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">--all</span> <span class="nt">--graph</span> <span class="nt">--oneline</span>
</code></pre></div></div>
<p><br /></p>

<h2 id="브랜치-생성과-동시에-이동">브랜치 생성과 동시에 이동</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git checkout <span class="nt">-b</span> issue
</code></pre></div></div>

<p><br /></p>

<h2 id="브랜치-병합merge">브랜치 병합(merge)</h2>
<p>1) 기준이 되는 브랜치로 이동합니다.  햐</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git checkout master   <span class="c">#issue 브랜치 -&gt; master 브랜치로 이동</span>
</code></pre></div></div>

<p>2) 합쳐질 브랜치를 병합합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git merge issue
</code></pre></div></div>

<p><br /></p>

<h2 id="fast-forward-merge">Fast-forward Merge</h2>
<p>브랜치의 위치만 최신 커밋으로 이동시키는 방식입니다.<br />
기준 브랜치의 커밋(master)과 병합될 브랜치의 커밋(issue)이 일직선상에 있을 때 Fast-forward Merge가 발생합니다.</p>

<p><br /></p>

<h2 id="브랜치-삭제">브랜치 삭제</h2>
<p>더 이상 사용되지 않는 브랜치는 삭제하기</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git branch <span class="nt">-d</span> issue
</code></pre></div></div>

<p><br /></p>

<h2 id="3-way-merge">3-way Merge</h2>
<p>아래 3개 커밋을 모두 고려하여 방합하는 방식으로 3-way Merge의 결과는 새로운 커밋으로 생성됩니다.</p>

<ol>
  <li>master와 feature-login 브랜치의 공통 부모 커밋</li>
  <li>master 브랜치의 최신 커밋</li>
  <li>feature-login 브랜치의 최신 커밋</li>
</ol>

<p><br /></p>

<h2 id="변경사항의-충돌-conflict">변경사항의 충돌 (conflict)</h2>
<p>개발하는 기능의 목적에 맞게 어떤 변경사항을 어떻게 반영할지를 결정하고 수정하여 반영하는 것을 conflict을 해결하는 과정이라 한다.</p>

<p><br /></p>

<h2 id="충돌을-해결하는-방법">충돌을 해결하는 방법</h2>
<p>1) 직접 merge를 합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> vi MainService.java
</code></pre></div></div>

<p>2) mergetool을 사용합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git mergetool
</code></pre></div></div>

<p><br /></p>

<h2 id="mergetool-사용하여-충돌을-해결하는-방법">mergetool 사용하여 충돌을 해결하는 방법</h2>
<ol>
  <li>개발자의 의도대로 수정합니다.</li>
  <li>COnflict 표준 기호를 제거합니다. ( &lt;&lt;&lt;&lt;&lt;&lt;&lt;, -------, &gt;&gt;&gt;&gt;&gt;&gt;&gt;)</li>
  <li>수정 완료되면 저장 후 종료합니다. (:wq)</li>
  <li>나머지 3-way 창은 수정 없이 종료합니다. (:q)</li>
  <li>병합이 제대로 되었는지 확인 후, commit을 생성합니다.</li>
</ol>

<p><br /></p>

<h2 id="cherry-pick">cherry-pick</h2>
<p>다른 브랜치의 커밋을 선택적으로 가져와 현재 브랜치에 적용 시킬 때 사용합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git cherry-pick 9bb3a9f   <span class="c">#git cherry-pick {commit id}</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="git에서-태그란">Git에서 태그란?</h2>
<p>태그는 특정 시점의 소스코드 정보를 기록합니다.
프로젝트 진행 중 의미있는 시점의 커밋을 태깅한 것입니다.</p>

<p>의미있는 시점이란,</p>
<ul>
  <li>1차 목표 기능 개발 완료되었을 때,</li>
  <li>매우 중요한 이슈가 해결되었을 때,</li>
  <li>기능 개발 완료 및 테스트까지 모두 완료하여 통과하였을 때,</li>
  <li>고객에게 소프트웨어를 배포할 때,</li>
  <li>…</li>
</ul>

<p><br /></p>

<h2 id="git-태그의-종류">Git 태그의 종류</h2>
<p><strong>1) Lightweight 태그</strong></p>
<ul>
  <li>버전명과 같은 태그명만 남기는 태그</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git tag v1.0   <span class="c">#git tag [태그명]</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>2) Annotated 태그</strong></p>
<ul>
  <li>Git 데이터베이스에 태그를 만든 사람의 이름, 이메일, 태그 생성 날짜, 태그 메시지 등을 저장한 태그</li>
</ul>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git tag <span class="nt">-a</span> v1.0 <span class="nt">-m</span> <span class="s2">"Implemented login feature"</span>   <span class="c">#git tag -a [태그명] -m [태그 메시지]</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="annotated-태그-생성하기">Annotated 태그 생성하기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git tag <span class="nt">-a</span> v1.0 <span class="nt">-m</span> <span class="s2">"Implemented login feature"</span>
 git log
</code></pre></div></div>

<p><br /></p>

<h2 id="태그-정보-확인하기">태그 정보 확인하기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git show v1.0
</code></pre></div></div>

<p><br /></p>

<h2 id="특정-시점의-커밋-태그하기">특정 시점의 커밋 태그하기</h2>
<p>1) 태깅하고자 하는 커밋의 ID 값을 확인한다.<br />
2) 커밋 ID 값을 인자로 태깅한다.<br />
3) 태그 정보를 확인한다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git log <span class="nt">--oneline</span>
 git tag <span class="nt">-a</span> v0.1 <span class="o">[</span>커밋ID] <span class="nt">-m</span> <span class="s2">"fix issue number-1"</span>
 git log <span class="nt">--oneline</span>
 git show v0.1
</code></pre></div></div>

<p><br /></p>

<h2 id="git-stash">git stash</h2>
<p>작업 도중 브랜치를 전환할 때 git stash를 이용하여 작업 디렉토리 내 unstaged 파일들을 백업 후 전환합니다.</p>

<p><br /></p>

<h2 id="git-stash-저장">git stash 저장</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git stash save
 git stash list
</code></pre></div></div>
<p>*WIP : Work In Progress</p>

<p><br /></p>

<h2 id="git-stash-불러오기">git stash 불러오기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git stash apply
</code></pre></div></div>

<p><br /></p>

<h2 id="git-stash-삭제">git stash 삭제</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git stash drop
</code></pre></div></div>

<p><br /></p>

<h2 id="git-rebase">git rebase</h2>
<p>base의 위치를 바꿔 머지하는 방식입니다.</p>

<p><br /></p>

<h2 id="숨겨진-브랜치원격-저장소의-브랜치까지-모두-보기">숨겨진 브랜치(원격 저장소의 브랜치)까지 모두 보기</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git branch <span class="nt">-a</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="원격-저장소의-브랜치를-로컬-저장소로-활성화">원격 저장소의 브랜치를 로컬 저장소로 활성화</h2>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git checkout <span class="nt">-t</span> origin/test   <span class="c">#-t는 tracking을 의미</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="rebase-사용-방법">rebase 사용 방법</h2>
<p>1) rebase 할 대상 브랜치에서 git rebase 명령어를 사용합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git rebase master   <span class="c">#master의 최신 커밋이 base가 되어 test 커밋들이 뒤에 붙습니다. </span>
</code></pre></div></div>

<p>2) master 브랜치로 전환 후 최종 merge합니다.</p>
<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code> git checkout master
 git merge <span class="nb">test</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="merge-vs-rebasse">merge vs. rebasse</h2>
<ul>
  <li>rebase가 직관적이고(선형적), 활용성이 높지만 사용이 어렵습니다.</li>
  <li>커밋의 구조를 바꾸기 때문에 원격 저장소를 통한 협업 시 잘못 사용하면 커밋 히스토리가 상당히 복잡해집니다.</li>
  <li>로컬 브랜치 내에서 히스토리 정리할 때만 사용하는 것을 권장합니다.</li>
</ul>

<p><br /></p>

<h2 id="gitflow-설명">GitFlow 설명</h2>
<p>https://nvie.com/posts/a-successful-git-branching-model</p>

<p><br /></p>

<h2 id="gitflow-모델">GitFlow 모델</h2>
<ul>
  <li>master : 제품으로 출시될 수 있는 브랜치</li>
  <li>develop : 다음 출시 버전을 개발하는 브랜치</li>
  <li>feature : 기능을 개발하는 브랜치</li>
  <li>release : 이번 출시 버전을 준비하는 브랜치</li>
  <li>hotfix : 출시 버전에서 발생한 버그를 수정하는 브랜치</li>
</ul>

<p><br /></p>
:ET